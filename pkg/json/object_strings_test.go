package json

import (
	"bytes"
	"fmt"
	"reflect"
	"testing"

	"github.com/open-policy-agent/opa/ast"
	"github.com/open-policy-agent/opa/util"
)

func TestObjectStringsSizes(t *testing.T) {
	tests := []struct {
		json string
	}{
		{`{}`},
		{`{"00":"1"}`},
		{`{"00":"1","01":"2"}`},
		{`{"00":"1","01":"2","02":"3"}`},
		{`{"00":"1","01":"2","02":"3","03":"4"}`},
		{`{"00":"1","01":"2","02":"3","03":"4","04":"5"}`},
		{`{"00":"1","01":"2","02":"3","03":"4","04":"5","05":"6"}`},
		{`{"00":"1","01":"2","02":"3","03":"4","04":"5","05":"6","06":"7"}`},
		{`{"00":"1","01":"2","02":"3","03":"4","04":"5","05":"6","06":"7","07":"8"}`},
		{`{"00":"1","01":"2","02":"3","03":"4","04":"5","05":"6","06":"7","07":"8","08":"9"}`},
		{`{"00":"1","01":"2","02":"3","03":"4","04":"5","05":"6","06":"7","07":"8","08":"9","09":"10"}`},
		{`{"00":"1","01":"2","02":"3","03":"4","04":"5","05":"6","06":"7","07":"8","08":"9","09":"10","10":"11"}`},
		{`{"00":"1","01":"2","02":"3","03":"4","04":"5","05":"6","06":"7","07":"8","08":"9","09":"10","10":"11","11":"12"}`},
		{`{"00":"1","01":"2","02":"3","03":"4","04":"5","05":"6","06":"7","07":"8","08":"9","09":"10","10":"11","11":"12","12":"13"}`},
		{`{"00":"1","01":"2","02":"3","03":"4","04":"5","05":"6","06":"7","07":"8","08":"9","09":"10","10":"11","11":"12","12":"13","13":"14"}`},
		{`{"00":"1","01":"2","02":"3","03":"4","04":"5","05":"6","06":"7","07":"8","08":"9","09":"10","10":"11","11":"12","12":"13","13":"14","14":"15"}`},
		{`{"00":"1","01":"2","02":"3","03":"4","04":"5","05":"6","06":"7","07":"8","08":"9","09":"10","10":"11","11":"12","12":"13","13":"14","14":"15","15":"16"}`},
		{`{"00":"1","01":"2","02":"3","03":"4","04":"5","05":"6","06":"7","07":"8","08":"9","09":"10","10":"11","11":"12","12":"13","13":"14","14":"15","15":"16","16":"17"}`},
		{`{"00":"1","01":"2","02":"3","03":"4","04":"5","05":"6","06":"7","07":"8","08":"9","09":"10","10":"11","11":"12","12":"13","13":"14","14":"15","15":"16","16":"17","17":"18"}`},
		{`{"00":"1","01":"2","02":"3","03":"4","04":"5","05":"6","06":"7","07":"8","08":"9","09":"10","10":"11","11":"12","12":"13","13":"14","14":"15","15":"16","16":"17","17":"18","18":"19"}`},
		{`{"00":"1","01":"2","02":"3","03":"4","04":"5","05":"6","06":"7","07":"8","08":"9","09":"10","10":"11","11":"12","12":"13","13":"14","14":"15","15":"16","16":"17","17":"18","18":"19","19":"20"}`},
		{`{"00":"1","01":"2","02":"3","03":"4","04":"5","05":"6","06":"7","07":"8","08":"9","09":"10","10":"11","11":"12","12":"13","13":"14","14":"15","15":"16","16":"17","17":"18","18":"19","19":"20","20":"21"}`},
		{`{"00":"1","01":"2","02":"3","03":"4","04":"5","05":"6","06":"7","07":"8","08":"9","09":"10","10":"11","11":"12","12":"13","13":"14","14":"15","15":"16","16":"17","17":"18","18":"19","19":"20","20":"21","21":"22"}`},
		{`{"00":"1","01":"2","02":"3","03":"4","04":"5","05":"6","06":"7","07":"8","08":"9","09":"10","10":"11","11":"12","12":"13","13":"14","14":"15","15":"16","16":"17","17":"18","18":"19","19":"20","20":"21","21":"22","22":"23"}`},
		{`{"00":"1","01":"2","02":"3","03":"4","04":"5","05":"6","06":"7","07":"8","08":"9","09":"10","10":"11","11":"12","12":"13","13":"14","14":"15","15":"16","16":"17","17":"18","18":"19","19":"20","20":"21","21":"22","22":"23","23":"24"}`},
		{`{"00":"1","01":"2","02":"3","03":"4","04":"5","05":"6","06":"7","07":"8","08":"9","09":"10","10":"11","11":"12","12":"13","13":"14","14":"15","15":"16","16":"17","17":"18","18":"19","19":"20","20":"21","21":"22","22":"23","23":"24","24":"25"}`},
		{`{"00":"1","01":"2","02":"3","03":"4","04":"5","05":"6","06":"7","07":"8","08":"9","09":"10","10":"11","11":"12","12":"13","13":"14","14":"15","15":"16","16":"17","17":"18","18":"19","19":"20","20":"21","21":"22","22":"23","23":"24","24":"25","25":"26"}`},
		{`{"00":"1","01":"2","02":"3","03":"4","04":"5","05":"6","06":"7","07":"8","08":"9","09":"10","10":"11","11":"12","12":"13","13":"14","14":"15","15":"16","16":"17","17":"18","18":"19","19":"20","20":"21","21":"22","22":"23","23":"24","24":"25","25":"26","26":"27"}`},
		{`{"00":"1","01":"2","02":"3","03":"4","04":"5","05":"6","06":"7","07":"8","08":"9","09":"10","10":"11","11":"12","12":"13","13":"14","14":"15","15":"16","16":"17","17":"18","18":"19","19":"20","20":"21","21":"22","22":"23","23":"24","24":"25","25":"26","26":"27","27":"28"}`},
		{`{"00":"1","01":"2","02":"3","03":"4","04":"5","05":"6","06":"7","07":"8","08":"9","09":"10","10":"11","11":"12","12":"13","13":"14","14":"15","15":"16","16":"17","17":"18","18":"19","19":"20","20":"21","21":"22","22":"23","23":"24","24":"25","25":"26","26":"27","27":"28","28":"29"}`},
		{`{"00":"1","01":"2","02":"3","03":"4","04":"5","05":"6","06":"7","07":"8","08":"9","09":"10","10":"11","11":"12","12":"13","13":"14","14":"15","15":"16","16":"17","17":"18","18":"19","19":"20","20":"21","21":"22","22":"23","23":"24","24":"25","25":"26","26":"27","27":"28","28":"29","29":"30"}`},
		{`{"00":"1","01":"2","02":"3","03":"4","04":"5","05":"6","06":"7","07":"8","08":"9","09":"10","10":"11","11":"12","12":"13","13":"14","14":"15","15":"16","16":"17","17":"18","18":"19","19":"20","20":"21","21":"22","22":"23","23":"24","24":"25","25":"26","26":"27","27":"28","28":"29","29":"30","30":"31"}`},
		{`{"00":"1","01":"2","02":"3","03":"4","04":"5","05":"6","06":"7","07":"8","08":"9","09":"10","10":"11","11":"12","12":"13","13":"14","14":"15","15":"16","16":"17","17":"18","18":"19","19":"20","20":"21","21":"22","22":"23","23":"24","24":"25","25":"26","26":"27","27":"28","28":"29","29":"30","30":"31","31":"32"}`},
		{`{"00":"1","01":"2","02":"3","03":"4","04":"5","05":"6","06":"7","07":"8","08":"9","09":"10","10":"11","11":"12","12":"13","13":"14","14":"15","15":"16","16":"17","17":"18","18":"19","19":"20","20":"21","21":"22","22":"23","23":"24","24":"25","25":"26","26":"27","27":"28","28":"29","29":"30","30":"31","31":"32","32":"33"}`},
	}

	if len(tests) <= maxCompactObject+1 {
		t.Fatal("non-compact object not tested")
	}

	for _, test := range tests {
		t.Run("", func(t *testing.T) {
			var native interface{}
			if err := util.NewJSONDecoder(bytes.NewBufferString(test.json)).Decode(&native); err != nil {
				t.Fatal(err)
			}

			// Decoding, Clone

			doc, err := NewDecoder(bytes.NewBufferString(test.json)).Decode()
			if err != nil {
				t.Fatal(err)
			}

			if doc.String() != test.json {
				t.Errorf("incorrect json marshaling: %s", doc.String())
			}

			var nativeObj = native.(map[string]interface{})
			var obj = doc.(Object)

			obj = obj.Clone(true).(Object)
			if !reflect.DeepEqual(obj.JSON(), nativeObj) {
				t.Error("broken decoder or clone")
			}

			// Compare, Len, AST

			if obj.Compare(MustNew(nativeObj)) != 0 {
				t.Error("broken compare")
			}

			if len(nativeObj) != obj.Len() {
				t.Error("broken len")
			}

			if ast.MustInterfaceToValue(nativeObj).Compare(obj.AST()) != 0 {
				t.Error("broken ast conversion")
			}

			// Len, Iterate, Value, Extract

			for i := 0; i < obj.Len(); i++ {
				if !reflect.DeepEqual(NewString(fmt.Sprintf("%d", i+1)), obj.Iterate(i)) {
					t.Error("broken iteration")
				}

				if !reflect.DeepEqual(NewString(fmt.Sprintf("%d", i+1)), obj.Value(fmt.Sprintf("%02d", i))) {
					t.Error("broken value")
				}

				e, err := obj.Extract(fmt.Sprintf("/%02d", i))
				if err != nil || !reflect.DeepEqual(NewString(fmt.Sprintf("%d", i+1)), e) {
					t.Error("broken extract")
				}

			}

			// Find

			var found Json
			p, _ := ParsePath("$")
			obj.Find(p, func(v Json) {
				found = v
			})
			if found.Compare(obj) != 0 {
				t.Error("broken find")
			}

			// Set

			if o, ok := obj.Set("a", NewString("b")); ok {
				obj = o
			}

			nativeObj["a"] = "b"
			if !reflect.DeepEqual(obj.JSON(), nativeObj) {
				t.Error("broken set")
			}

			// SetIdx, RemoveIdx

			obj = obj.SetIdx(obj.Len()-1, NewString("b updated")).(Object)
			nativeObj["a"] = "b updated"
			if !reflect.DeepEqual(obj.JSON(), nativeObj) {
				t.Error("broken set idx")
			}

			obj = obj.RemoveIdx(obj.Len() - 1).(Object)
			delete(nativeObj, "a")
			if !reflect.DeepEqual(obj.JSON(), nativeObj) {
				t.Error("broken remove idx")
			}

			// Walk

			var walker testObjectWalker
			obj.Walk(NewDecodingState(), &walker)
			if walker.decoded != test.json {
				t.Error("broken walk: " + walker.decoded)
			}
		})
	}
}
