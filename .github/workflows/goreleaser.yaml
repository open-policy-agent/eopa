name: Manual Goreleaser run

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to release"
        required: true

env:
  GOPRIVATE: github.com/StyraInc/opa

jobs:
  prereqs:
    name: Prereqs
    runs-on: ubuntu-24.04
    steps:
      - uses: StyraInc/styra-init-action@main # ratchet:exclude

  goreleaser:
    name: GoReleaser
    needs: prereqs
    runs-on: ubuntu-22.04
    env:
      QUILL_SIGN_P12: ${{ secrets.QUILL_SIGN_P12 }} # base64 encoded contents
      QUILL_SIGN_PASSWORD: ${{ secrets.QUILL_SIGN_PASSWORD }} # p12 password
      QUILL_NOTARY_KEY: ${{ secrets.QUILL_NOTARY_KEY }}
      QUILL_NOTARY_KEY_ID: ${{ secrets.QUILL_NOTARY_KEY_ID }}
      QUILL_NOTARY_ISSUER: ${{ secrets.QUILL_NOTARY_ISSUER }}
      CERT_ID: ${{ secrets.CERT_ID }}
      SM_API_KEY: ${{ secrets.SM_API_KEY }}
      SM_CLIENT_CERT_FILE: ${{ github.workspace }}/bot-client-auth-cert.p12
      SM_CLIENT_CERT_PASSWORD: ${{ secrets.SM_CLIENT_CERT_PASSWORD }}
    steps:
      - name: Tune GitHub-hosted runner network
        uses: smorimoto/tune-github-hosted-runner-network@bb252dcb5c8609a31087e7993daa086f5a1c0069 # ratchet:smorimoto/tune-github-hosted-runner-network@v1
      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # ratchet:tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_ID }}
          private_key: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_PEM_KEY }}
      - name: Override GH Token Env Var
        run: echo "GH_API_TOKEN=${{ steps.generate_token.outputs.token }}" >> $GITHUB_ENV
      - uses: open-policy-agent/setup-opa@34a30e8a924d1b03ce2cf7abe97250bbb1f332b5 # ratchet:open-policy-agent/setup-opa@v2
      - name: Check out code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # ratchet:actions/checkout@v4
        with:
          fetch-depth: 0
          path: enterprise-opa
          ref: ${{ inputs.tag }}
      - id: go_version
        name: Read go version
        run: echo "go_version=$(cat .go-version)" >> $GITHUB_OUTPUT
        working-directory: enterprise-opa
      - uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # ratchet:actions/setup-go@v5
        with:
          go-version: ${{ steps.go_version.outputs.go_version }}
          cache-dependency-path: enterprise-opa/go.sum
      - name: Setup github api token
        run: git config --global url.https://git:$GH_API_TOKEN@github.com/.insteadOf https://github.com/
      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@90a3faa9d0182683851fbfa97ca1a2cb983bfca3 # ratchet:goreleaser/goreleaser-action@v6
        with:
          install-only: true
      - name: Install anchore/quill (macos signing)
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/quill/main/install.sh |\
          sh -s -- -b /usr/local/bin
      - name: Set up Java
        uses: actions/setup-java@3a4f6e1af504cf6a31855fa899c6aa5355ba6c12 # ratchet:actions/setup-java@v4
        with:
          java-version: 17
          distribution: "temurin"
      - name: Download Jsign + add script to PATH
        run: |
          wget https://github.com/ebourg/jsign/releases/download/7.1/jsign-7.1.jar
          echo "#!/usr/bin/env bash" >> jsign
          echo "java -jar $GITHUB_WORKSPACE/jsign-7.1.jar \"\$@\"" >> jsign
          chmod +x jsign
          echo $GITHUB_WORKSPACE >> $GITHUB_PATH
      - name: Extract client authentication cert
        run: echo $SM_CLIENT_CERT_FILE_BASE64 | base64 --decode > bot-client-auth-cert.p12
        env:
          SM_CLIENT_CERT_FILE_BASE64: ${{ secrets.SM_CLIENT_CERT_FILE_BASE64 }}
      - name: Run GoReleaser
        # NOTE(sr): not calling the Makefile target here, since we've checked out a previous tag
        run: |
          VER=${{ inputs.tag }}
          export EOPA_VERSION=${VER:1}
          ./build/latest-release-notes.sh --output="${RELEASE_NOTES}"
          goreleaser release --clean --release-notes "${RELEASE_NOTES}" --timeout=60m
        working-directory: enterprise-opa
        env:
          HOSTNAME: github.actions.local
          TAP_GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          RELEASE_NOTES: ../release-notes.md
          EOPA_TELEMETRY_URL: https://load-telemetry.corp.styra.com
      - name: Upload binary artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: windows-binaries
          if-no-files-found: error
          path: |
            enterprise-opa/dist/windows*/*.exe

  verify-authenticode-signature:
    name: Verify signature
    runs-on: ubuntu-22.04
    needs: goreleaser
    steps:
      - name: Tune GitHub-hosted runner network
        uses: smorimoto/tune-github-hosted-runner-network@bb252dcb5c8609a31087e7993daa086f5a1c0069 # ratchet:smorimoto/tune-github-hosted-runner-network@v1
      - name: Check out code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # ratchet:actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download generated artifacts
        uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e # v4.2.1
        with:
          name: windows-binaries
          path: windows-binaries
      - name: Get Root CA certificate.
        run: curl -x GET https://cacerts.digicert.com/DigiCertTrustedRootG4.crt.pem > rootca.pem
      - name: Install osslsigncode
        run: |
          sudo apt-get update
          sudo apt-get install -y osslsigncode
      - name: Verify signature
        run: |
          for file in $(ls windows-binaries/**/*.exe); do
            echo "Processing $file"
            osslsigncode verify -CAfile rootca.pem -TSA-CAfile rootca.pem $file
          done
