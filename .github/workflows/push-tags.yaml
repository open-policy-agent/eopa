name: Publish

on:
  push:
    tags:
      - v[0-9].**

env:
  GOPRIVATE: github.com/StyraInc/opa
  GO_VERSION: 1.21

jobs:
  goreleaser:
    name: GoReleaser
    runs-on: ubuntu-22.04
    needs:
    - kopush
    environment: ci
    env:
      QUILL_SIGN_P12: ${{ secrets.QUILL_SIGN_P12 }} # base64 encoded contents
      QUILL_SIGN_PASSWORD: ${{ secrets.QUILL_SIGN_PASSWORD }} # p12 password
      QUILL_NOTARY_KEY: ${{ secrets.QUILL_NOTARY_KEY }}
      QUILL_NOTARY_KEY_ID: ${{ secrets.QUILL_NOTARY_KEY_ID }}
      QUILL_NOTARY_ISSUER: ${{ secrets.QUILL_NOTARY_ISSUER }}
    steps:
      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_ID }}
          private_key: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_PEM_KEY }}
      - name: Override GH Token Env Var
        run: echo "GH_API_TOKEN=${{ steps.generate_token.outputs.token }}" >> $GITHUB_ENV
      - uses: open-policy-agent/setup-opa@v2
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: enterprise-opa
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: enterprise-opa/go.sum
          check-latest: true
      - name: Setup github api token
        run: git config --global url.https://git:$GH_API_TOKEN@github.com/.insteadOf https://github.com/
      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          install-only: true
      - name: Install anchore/quill (macos signing)
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/quill/main/install.sh |\
          sh -s -- -b /usr/local/bin
      - name: Run GoReleaser
        run: make release-ci
        working-directory: enterprise-opa
        env:
          HOSTNAME: github.actions.local
          TAP_GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          RELEASE_NOTES: ../release-notes.md

  kopush:
    name: Ko Push
    runs-on: ubuntu-22.04
    environment: ci
    steps:
      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_ID }}
          private_key: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_PEM_KEY }}
      - name: Override GH Token Env Var
        run: echo "GH_API_TOKEN=${{ steps.generate_token.outputs.token }}" >> $GITHUB_ENV
      - uses: open-policy-agent/setup-opa@v2
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
      - name: Setup github api token
        run: git config --global url.https://git:$GH_API_TOKEN@github.com/.insteadOf https://github.com/
      - uses: ko-build/setup-ko@v0.6
      - name: Build and Push Images
        run: make auth-deploy-ci-debug auth-deploy-ci
        env:
          AUTH_RELEASE: ${{ github.ref_name }}

  proto-docs-push:
    name: Push Protobuf docs to BSR
    runs-on: ubuntu-22.04
    environment: ci
    env:
      BUF_TOKEN: ${{ secrets.BUF_TOKEN }}
    steps:
      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_ID }}
          private_key: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_PEM_KEY }}
      - name: Override GH Token Env Var
        run: echo "GH_API_TOKEN=${{ steps.generate_token.outputs.token }}" >> $GITHUB_ENV
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # Note(philip): We need to install the `buf` CLI before we can lint our protobuf sources.
      # The action uses the repo-scoped GITHUB_TOKEN to allow one of its dependencies (Octokit)
      # to skip Github API rate limits when fetching the latest buf build artifact.
      - uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      # Note(philip): We do not use bufbuild/buf-push-action@v1 here, because that action
      # always creates docs under the Git commit SHA, and we'd like to have nice semver-style
      # tag names for releases.
      - name: Manually publish to BSR
        run:
          buf push proto --tag ${{ github.ref_name }}

  pr-artifacts:
    name: Publish proto defs and capabilities.json using a PR
    runs-on: ubuntu-22.04
    environment: ci
    steps:
      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_ID }}
          private_key: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_PEM_KEY }}
      - name: Override GH Token Env Var
        run: echo "GH_API_TOKEN=${{ steps.generate_token.outputs.token }}" >> $GITHUB_ENV
      - name: Setup Github API token
        run: git config --global url.https://git:$GH_API_TOKEN@github.com/.insteadOf https://github.com/
      - name: Check out code for EOPA
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check out code for the public repo
        uses: actions/checkout@v4
        with:
          repository: StyraInc/enterprise-opa
          path: _public
          persist-credentials: false
      # Copy files, generate commit on local branch, then push branch to remote.
      - name: Copy over files from private -> public repo
        run: |
          # Copy protobuf files over.
          mkdir -p _public/proto/eopa
          cp -r proto/eopa/ _public/proto/
          # Copy capabilities.json files over.
          mkdir -p _public/capabilities
          cp capabilities/*.json _public/capabilities/
          # Ensure the changes are picked up, especially if we added new files/folders.
          cd _public
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          # Ensure branch exists on remote for the 'gh pr create' command later.
          git checkout -b artifacts-${{ github.ref_name }} origin/main
          git commit -am "Update proto defs and capabilities JSON files for ${{ github.ref_name }} release"
          git push -u origin artifacts-${{ github.ref_name }}
      # Do a pre-flight check to ensure we don't make a needless PR.
      - name: Check for proto/ file changes in git diffs for public repo
        id: changes
        run: |
          cd _public;
          if git diff --name-only -r main artifacts-${{ github.ref_name }} | grep -q 'proto/';
          then
            echo "proto=true" >> $GITHUB_OUTPUT
          fi
          if git diff --name-only -r main artifacts-${{ github.ref_name }} | grep -q 'capabilities/';
          then
            echo "capabilities=true" >> $GITHUB_OUTPUT
          fi
      - name: Create PR if changes detected
        if: steps.changes.outputs.proto == 'true' || steps.changes.outputs.capabilities == 'true'
        run: |
          cd _public
          gh pr create -B main --head artifacts-${{ github.ref_name }} --title 'Update proto defs and capabilities JSON files for ${{ github.ref_name }} release' --body 'Created by Github action'
        env:
          GITHUB_TOKEN: ${{steps.generate_token.outputs.token }}
