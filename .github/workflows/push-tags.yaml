name: Publish

on:
  push:
    tags:
      - v[0-9].**

env:
  GOPRIVATE: github.com/StyraInc/opa

jobs:
  prereqs:
    name: Prereqs
    runs-on: ubuntu-24.04
    steps:
      - uses: StyraInc/styra-init-action@main

  goreleaser:
    name: GoReleaser
    runs-on: ubuntu-24.04
    needs: prereqs
    env:
      QUILL_SIGN_P12: ${{ secrets.QUILL_SIGN_P12 }} # base64 encoded contents
      QUILL_SIGN_PASSWORD: ${{ secrets.QUILL_SIGN_PASSWORD }} # p12 password
      QUILL_NOTARY_KEY: ${{ secrets.QUILL_NOTARY_KEY }}
      QUILL_NOTARY_KEY_ID: ${{ secrets.QUILL_NOTARY_KEY_ID }}
      QUILL_NOTARY_ISSUER: ${{ secrets.QUILL_NOTARY_ISSUER }}
      CERT_ID: ${{ secrets.CERT_ID }}
      SM_API_KEY: ${{ secrets.SM_API_KEY }}
      SM_CLIENT_CERT_FILE: ${{ github.workspace }}/bot-client-auth-cert.p12
      SM_CLIENT_CERT_PASSWORD: ${{ secrets.SM_CLIENT_CERT_PASSWORD }}
    steps:
      - name: Tune GitHub-hosted runner network
        uses: smorimoto/tune-github-hosted-runner-network@bb252dcb5c8609a31087e7993daa086f5a1c0069 # v1.0.0
      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2.1.0
        with:
          app_id: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_ID }}
          private_key: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_PEM_KEY }}
      - name: Override GH Token Env Var
        run: echo "GH_API_TOKEN=${{ steps.generate_token.outputs.token }}" >> $GITHUB_ENV
      - uses: open-policy-agent/setup-opa@34a30e8a924d1b03ce2cf7abe97250bbb1f332b5 # v2.2.0
      - name: Check out code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          path: enterprise-opa
      - id: go_version
        name: Read go version
        run: echo "go_version=$(cat .go-version)" >> $GITHUB_OUTPUT
        working-directory: enterprise-opa
      - uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5.4.0
        with:
          go-version: ${{ steps.go_version.outputs.go_version }}
          cache-dependency-path: enterprise-opa/go.sum
      - name: Setup github api token
        run: git config --global url.https://git:$GH_API_TOKEN@github.com/.insteadOf https://github.com/
      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@90a3faa9d0182683851fbfa97ca1a2cb983bfca3 # v6.2.1
        with:
          install-only: true
      - name: Install anchore/quill (macos signing)
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/quill/main/install.sh |\
          sh -s -- -b /usr/local/bin
      - name: Set up Java
        uses: actions/setup-java@3a4f6e1af504cf6a31855fa899c6aa5355ba6c12 # v4.7.0
        with:
          java-version: 17
          distribution: "temurin"
      - name: Download Jsign
        run: curl -L https://github.com/ebourg/jsign/releases/download/7.1/jsign-7.1.jar -o jsign.jar
      - name: Extract client authentication cert
        run: echo $SM_CLIENT_CERT_FILE_BASE64 | base64 --decode > bot-client-auth-cert.p12
        env:
          SM_CLIENT_CERT_FILE_BASE64: ${{ secrets.SM_CLIENT_CERT_FILE_BASE64 }}
      - name: Run GoReleaser
        run: make release-ci
        working-directory: enterprise-opa
        env:
          HOSTNAME: github.actions.local
          TAP_GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          RELEASE_NOTES: ../release-notes.md
          JSIGN_JAR_PATH: ${{ github.workspace }}/jsign.jar
      - name: Upload binary artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: windows-binaries
          if-no-files-found: error
          path: |
            enterprise-opa/dist/windows*/*.exe

  kopush:
    name: Ko Push
    needs: prereqs
    runs-on: ubuntu-24.04
    steps:
      - name: Tune GitHub-hosted runner network
        uses: smorimoto/tune-github-hosted-runner-network@bb252dcb5c8609a31087e7993daa086f5a1c0069 # v1.0.0
      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2.1.0
        with:
          app_id: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_ID }}
          private_key: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_PEM_KEY }}
      - name: Override GH Token Env Var
        run: echo "GH_API_TOKEN=${{ steps.generate_token.outputs.token }}" >> $GITHUB_ENV
      - uses: open-policy-agent/setup-opa@34a30e8a924d1b03ce2cf7abe97250bbb1f332b5 # v2.2.0
      - name: Check out code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      - id: go_version
        name: Read go version
        run: echo "go_version=$(cat .go-version)" >> $GITHUB_OUTPUT
      - uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5.4.0
        with:
          go-version: ${{ steps.go_version.outputs.go_version }}
      - name: Setup github api token
        run: git config --global url.https://git:$GH_API_TOKEN@github.com/.insteadOf https://github.com/
      - uses: ko-build/setup-ko@d982fec422852203cfb2053a8ec6ad302280d04d # v0.8
      - name: Build and Push Images
        run: make auth-deploy-ci-debug auth-deploy-ci
        env:
          AUTH_RELEASE: ${{ github.ref_name }}

  proto-docs-push:
    name: Push Protobuf docs to BSR
    needs: prereqs
    runs-on: ubuntu-24.04
    env:
      BUF_TOKEN: ${{ secrets.BUF_TOKEN }}
    steps:
      - name: Tune GitHub-hosted runner network
        uses: smorimoto/tune-github-hosted-runner-network@bb252dcb5c8609a31087e7993daa086f5a1c0069 # v1.0.0
      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2.1.0
        with:
          app_id: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_ID }}
          private_key: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_PEM_KEY }}
      - name: Override GH Token Env Var
        run: echo "GH_API_TOKEN=${{ steps.generate_token.outputs.token }}" >> $GITHUB_ENV
      - name: Check out code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      # Note(philip): We need to install the `buf` CLI before we can lint our protobuf sources.
      # The action uses the repo-scoped GITHUB_TOKEN to allow one of its dependencies (Octokit)
      # to skip Github API rate limits when fetching the latest buf build artifact.
      - uses: bufbuild/buf-setup-action@a47c93e0b1648d5651a065437926377d060baa99 # v1.50.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      # Note(philip): We do not use bufbuild/buf-push-action@v1 here, because that action
      # always creates docs under the Git commit SHA, and we'd like to have nice semver-style
      # tag names for releases.
      - name: Manually publish to BSR
        run: buf push proto --tag ${{ github.ref_name }}

  pr-artifacts:
    name: Publish proto defs and capabilities.json using a PR
    needs: prereqs
    runs-on: ubuntu-24.04
    steps:
      - name: Tune GitHub-hosted runner network
        uses: smorimoto/tune-github-hosted-runner-network@bb252dcb5c8609a31087e7993daa086f5a1c0069 # v1.0.0
      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2.1.0
        with:
          app_id: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_ID }}
          private_key: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_PEM_KEY }}
      - name: Override GH Token Env Var
        run: echo "GH_API_TOKEN=${{ steps.generate_token.outputs.token }}" >> $GITHUB_ENV
      - name: Setup Github API token
        run: git config --global url.https://git:$GH_API_TOKEN@github.com/.insteadOf https://github.com/
      - name: Check out code for EOPA
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      - uses: open-policy-agent/setup-opa@34a30e8a924d1b03ce2cf7abe97250bbb1f332b5 # v2.2.0
      - name: Pick up OPA version
        id: supported-opa-version
        run: echo "opa_version=v$(build/get-opa-version.sh)" >> $GITHUB_OUTPUT
      - name: Pick up Regal version
        id: supported-regal-version
        run: echo "regal_version=v$(build/get-regal-version.sh)" >> $GITHUB_OUTPUT
      - name: Check out code for the public repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: StyraInc/enterprise-opa
          path: _public
          persist-credentials: false
      # Copy files, generate commit on local branch, then push branch to remote.
      - name: Copy over files from private -> public repo
        run: |
          # Copy protobuf files over.
          mkdir -p _public/proto/eopa
          cp -r proto/eopa/ _public/proto/
          # Copy capabilities.json files over.
          mkdir -p _public/capabilities
          cp capabilities/*.json _public/capabilities/
          # Update OPA badge version to match our currently-supported version.
          sed -i "s|https://openpolicyagent.org/badge-endpoint/v[0-9.]\+|https://openpolicyagent.org/badge-endpoint/${{ steps.supported-opa-version.outputs.opa_version }}|g" _public/README.md
          sed -i "s|\[OPA v[0-9.]\+\]|\[OPA ${{ steps.supported-opa-version.outputs.opa_version }}\]|g" _public/README.md
          # Update Regal badge version to match our currently-supported version.
          sed -i "s|https://img.shields.io/github/v/release/styrainc/regal?filter=v[0-9.]\+|https://img.shields.io/github/v/release/styrainc/regal?filter=${{ steps.supported-regal-version.outputs.regal_version }}|g" _public/README.md
          sed -i "s|https://github.com/StyraInc/regal/releases/tag/v[0-9.]\+|https://github.com/StyraInc/regal/releases/tag/${{ steps.supported-regal-version.outputs.regal_version }}|g" _public/README.md
          sed -i "s|\[Regal v[0-9.]\+\]|\[Regal ${{ steps.supported-regal-version.outputs.regal_version }}\]|g" _public/README.md
          # Ensure the changes are picked up, especially if we added new files/folders.
          cd _public
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          # Ensure branch exists on remote for the 'gh pr create' command later.
          git checkout -b artifacts-${{ github.ref_name }} origin/main
          git commit -am "Update public artifacts for ${{ github.ref_name }} release"
          git push -u origin artifacts-${{ github.ref_name }}
      # Do a pre-flight check to ensure we don't make a needless PR.
      - name: Check for relevant file changes in git diffs for public repo
        id: changes
        run: |
          cd _public;
          if git diff --name-only -r main artifacts-${{ github.ref_name }} | grep -q 'proto/';
          then
            echo "proto=true" >> $GITHUB_OUTPUT
          fi
          if git diff --name-only -r main artifacts-${{ github.ref_name }} | grep -q 'capabilities/';
          then
            echo "capabilities=true" >> $GITHUB_OUTPUT
          fi
          if git diff --name-only main artifacts-${{ github.ref_name }} | grep -q 'README.md';
          then
            echo "badges=true" >> $GITHUB_OUTPUT
          fi
      - name: Create PR if changes detected
        if: steps.changes.outputs.proto == 'true' || steps.changes.outputs.capabilities == 'true' || steps.changes.outputs.badges == 'true'
        run: |
          cd _public
          message="Update "
          if [[ "${{ steps.changes.outputs.badges }}" == "true" ]]; then
            message+="README, "
          fi
          if [[ "${{ steps.changes.outputs.proto }}" == "true" ]]; then
            message+="proto defs, "
          fi
          if [[ "${{ steps.changes.outputs.capabilities }}" == "true" ]]; then
            message+="capabilities JSON files, "
          fi
          # Remove trailing comma and space
          message="${message%, }"
          gh pr create -B main --head artifacts-${{ github.ref_name }} --title "$message for ${{ github.ref_name }} release" --body 'Created by Github action'
        env:
          GITHUB_TOKEN: ${{steps.generate_token.outputs.token }}

  verify-authenticode-signature:
    name: Verify signature
    runs-on: ubuntu-24.04
    needs: goreleaser
    steps:
      - name: Tune GitHub-hosted runner network
        uses: smorimoto/tune-github-hosted-runner-network@bb252dcb5c8609a31087e7993daa086f5a1c0069 # v1.0.0
      - name: Check out code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      - name: Download generated artifacts
        uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e # v4.2.1
        with:
          name: windows-binaries
          path: windows-binaries
      - name: Get Root CA certificate.
        run: curl -o rootca.pem https://cacerts.digicert.com/DigiCertTrustedRootG4.crt.pem
      - name: Install osslsigncode
        run: |
          sudo apt-get update
          sudo apt-get install -y osslsigncode
      - name: Verify signature
        run: |
          for file in $(ls windows-binaries/**/*.exe); do
            echo "Processing $file"
            osslsigncode verify -CAfile rootca.pem -TSA-CAfile rootca.pem $file
          done
