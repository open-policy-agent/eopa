name: Nightly
on:
  workflow_dispatch: {}   # Allow for manual triggers
  schedule:
    - cron:  '0 8 * * *'  # Daily, at 8:00 UTC

env:
  GO_VERSION: 1.21

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-22.04
    environment: ci
    env:
      GH_API_TOKEN: ${{ secrets.GH_API_TOKEN }}
    steps:
      - uses: open-policy-agent/setup-opa@v2
      - name: checkout Enterprise OPA
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: enterprise-opa
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: enterprise-opa/go.sum
          check-latest: true
      - name: Setup github api token
        run: git config --global url.https://$GH_API_TOKEN@github.com/.insteadOf https://github.com/
      - uses: ko-build/setup-ko@v0.6
      - name: Build
        run: make build
        working-directory: enterprise-opa
      - name: Upload image tarball
        uses: actions/upload-artifact@v3
        with:
          name: image
          path: enterprise-opa/local.tar
      - name: pick up opa version
        id: enterprise-opa
        run: echo "opa_version=v$(build/get-opa-version.sh)" >> $GITHUB_OUTPUT
        working-directory: enterprise-opa
      - name: checkout OPA
        uses: actions/checkout@v4
        with:
          repository: open-policy-agent/opa
          ref: ${{ steps.enterprise-opa.outputs.opa_version }}
          path: opa
      - name: pick up opa directory
        id: opa
        working-directory: opa
        run: echo "dir=$(pwd)" >> $GITHUB_OUTPUT
      - run: make test-race
        working-directory: enterprise-opa
        env:
          OPA_ROOT: ${{ steps.opa.outputs.dir }}

  goreleaser:
    name: GoReleaser
    runs-on: ubuntu-22.04
    environment: ci
    env:
      GH_API_TOKEN: ${{ secrets.GH_API_TOKEN }}
      QUILL_SIGN_P12: ${{ secrets.QUILL_SIGN_P12 }} # base64 encoded contents
      QUILL_SIGN_PASSWORD: ${{ secrets.QUILL_SIGN_PASSWORD }} # p12 password
      QUILL_NOTARY_KEY: ${{ secrets.QUILL_NOTARY_KEY }}
      QUILL_NOTARY_KEY_ID: ${{ secrets.QUILL_NOTARY_KEY_ID }}
      QUILL_NOTARY_ISSUER: ${{ secrets.QUILL_NOTARY_ISSUER }}
    steps:
      - name: (Dependabot Only) Generate GitHub App Token
        if: ${{ github.actor == 'dependabot[bot]' }}
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_ID }}
          private_key: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_PEM_KEY }}
      - name: (Dependabot Only) Override GH Token Env Var
        if: ${{ github.actor == 'dependabot[bot]' }}
        id: override_gh_api_token
        run:
          echo "GH_API_TOKEN=${{ steps.generate_token.outputs.token }}" >> $GITHUB_ENV
      - uses: open-policy-agent/setup-opa@v2
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
      - name: setup github api token
        run: git config --global url.https://git:$GH_API_TOKEN@github.com/.insteadOf https://github.com/
      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          install-only: true
      - name: Install anchore/quill (macos signing)
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/quill/main/install.sh |\
          sh -s -- -b /usr/local/bin
      - name: Make GoReleaser
        run: make release
        env:
          HOSTNAME: github.actions.local
          GITHUB_TOKEN: ${{ secrets.GH_API_TOKEN }}
      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: |
            dist/checksums.txt
            dist/*build_*/*

  smoke-test-releases:
    name: Smoke Test Releases
    runs-on: ${{ matrix.os }}
    needs: goreleaser
    environment: ci
    env:
      GH_API_TOKEN: ${{ secrets.GH_API_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            exec: dist/linux-windows-build_linux_amd64_v1/eopa
          - os: ubuntu-22.04
            exec: dist/linux-windows-build_linux_arm64/eopa
            arch: arm64
          - os: macos-latest
            exec: dist/darwin-build_darwin_amd64_v1/eopa
          - os: windows-latest
            exec: dist/linux-windows-build_windows_amd64_v1/eopa.exe

    steps:
      - name: (Dependabot Only) Generate GitHub App Token
        if: ${{ github.actor == 'dependabot[bot]' }}
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_ID }}
          private_key: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_PEM_KEY }}
      - name: (Dependabot Only) Override GH Token Env Var
        if: ${{ github.actor == 'dependabot[bot]' }}
        id: override_gh_api_token
        run:
          echo "GH_API_TOKEN=${{ steps.generate_token.outputs.token }}" >> $GITHUB_ENV
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64
        if: matrix.arch == 'arm64'
      - name: Check out code
        uses: actions/checkout@v4
      - name: Download release binaries
        uses: actions/download-artifact@v3
        with:
          name: binaries
          path: dist
      - name: Test binaries
        run: make ci-smoke-test BINARY=${{ matrix.exec }}
        env:
          EOPA_LICENSE_TOKEN: ${{ secrets.STYRA_LOAD_LICENSE_TOKEN }}

  regal:
    name: Regal e2e
    runs-on: ubuntu-22.04
    environment: ci
    steps:
      - uses: open-policy-agent/setup-opa@v2
      - name: checkout Enterprise OPA
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: enterprise-opa
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: enterprise-opa/go.sum
          check-latest: true
      - name: Build
        run: |
          go mod tidy
          go build -o regal main.go
        working-directory: enterprise-opa/examples/regal
        env:
          GOPRIVATE: github.com/styrainc/
      - name: pick up regal path and ref
        id: regal
        run: |
          echo "path=$(pwd)/regal" >> $GITHUB_OUTPUT
          go list -m -json github.com/styrainc/regal | opa eval -fraw -I 'sprintf("ref=%s", [split(input.Version, "-")[2]])' >> $GITHUB_OUTPUT
        working-directory: enterprise-opa/examples/regal
      - name: checkout Regal
        uses: actions/checkout@v4
        with:
          repository: styrainc/regal
          path: regal
          fetch-depth: 0
      - run: git checkout ${{ steps.regal.outputs.ref }}
        working-directory: regal
      - run: go test -tags e2e ./e2e -v
        working-directory: regal
        env:
          REGAL_BIN: ${{ steps.regal.outputs.path }}

  trivy-scan-image:
    name: Trivy security scan image
    runs-on: ubuntu-22.04
    needs: build
    steps:
      - name: Checkout code # needed for .trivyignore file
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download image tarball
        uses: actions/download-artifact@v3
        with:
          name: image
      - name: Enterprise OPA image
        id: enterprise-opa
        run: echo "image=$(docker load --quiet --input local.tar | awk '{print $3}')" >> $GITHUB_OUTPUT
        # Equivalent to:
        # $ trivy image $IMAGE
      - name: Run Trivy scan on image
        uses: aquasecurity/trivy-action@0.12.0
        with:
          image-ref: ${{ steps.enterprise-opa.outputs.image }}
          format: table
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: os,library
          severity: CRITICAL,HIGH

  trivy-scan-repo:
    name: Trivy security scan repo
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Equivalent to:
      # $ trivy fs .
      - name: Run Trivy scan on repo
        uses: aquasecurity/trivy-action@0.12.0
        with:
          scan-type: fs
          format: table
          exit-code: '1'
          ignore-unfixed: true
          severity: CRITICAL,HIGH

  govulncheck:
    name: Go vulnerability check
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true

      - run: go install golang.org/x/vuln/cmd/govulncheck@latest
      - run: govulncheck -tags use_opa_fork ./...

  fuzzer:
    name: Go Fuzzer
    runs-on: ubuntu-22.04
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
      - run: make fuzz
      - name: Dump crashers
        if: ${{ failure() }}
        run: |
          cd pkg/json/testdata/fuzz
          git add -A
          git diff HEAD

  analyze:
    name: CodeQL
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: go

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:go"
