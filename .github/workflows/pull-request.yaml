name: Check

on:
  workflow_dispatch: {}
  pull_request:
    branches: [ main ]

# When a new revision is pushed to a PR, cancel all in-progress CI runs for that
# PR. See https://docs.github.com/en/actions/using-jobs/using-concurrency
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  GOPRIVATE: github.com/StyraInc/opa
  GO_VERSION: 1.21

jobs:
  lint:
    name: Analysis & Linting
    runs-on: ubuntu-22.04
    environment: ci
    steps:
      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_ID }}
          private_key: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_PEM_KEY }}
      - name: Override GH Token Env Var
        run: echo "GH_API_TOKEN=${{ steps.generate_token.outputs.token }}" >> $GITHUB_ENV
      - name: Setup github api token
        run: git config --global url.https://git:$GH_API_TOKEN@github.com/.insteadOf https://github.com/
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.55.2
          skip-pkg-cache: true
          skip-build-cache: true
          args: --timeout=10m --out-format=colored-line-number,github-actions
      # Do a pre-flight check to ensure we don't bother with `buf` unless
      # we have protobuf changes present.
      - name: Check for proto/ file changes in git diffs.
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            proto:
              - 'proto/**'
      # Note(philip): We need to install the `buf` CLI before we can lint our protobuf sources.
      # The action uses the repo-scoped GITHUB_TOKEN to allow one of its dependencies (Octokit)
      # to skip Github API rate limits when fetching the latest buf build artifact.
      - uses: bufbuild/buf-setup-action@v1
        if: steps.changes.outputs.proto == 'true'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - uses: bufbuild/buf-lint-action@v1
        if: steps.changes.outputs.proto == 'true'
        with:
          input: proto
      # Now that we've passed linting, we check to make sure the build artifacts are identical
      # to what was checked in.
      - name: Install protoc-gen-go dependencies
        if: steps.changes.outputs.proto == 'true'
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.30.0
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2.0
      - name: Fail if `buf generate` diff detected between generated/checked in files
        if: steps.changes.outputs.proto == 'true'
        run: |-
          cd proto && buf generate
          if [[ "$(git diff --name-status | wc -l)" != 0 ]]; then
            echo "::error:: Files with diffs: $(git diff --name-status)"
            echo "::error:: Diffs are: $(git diff)"
            echo "::info:: If the diffs above include the protoc version number, consider reinstalling to get the latest protbuf/grpc tooling."
            exit 1
          fi
      - name: Setup Regal
        uses: StyraInc/setup-regal@v0.2.0
        with:
          version: v0.10.1
      - name: Run Regal Lint
        run: regal lint --format github .

  test:
    name: Test
    runs-on: ubuntu-22.04
    environment: ci
    steps:
      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_ID }}
          private_key: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_PEM_KEY }}
      - name: Override GH Token Env Var
        run: echo "GH_API_TOKEN=${{ steps.generate_token.outputs.token }}" >> $GITHUB_ENV
      - name: Setup github api token
        run: git config --global url.https://git:$GH_API_TOKEN@github.com/.insteadOf https://github.com/
      - uses: open-policy-agent/setup-opa@v2
      - name: checkout Enterprise OPA
        uses: actions/checkout@v4
        with:
          path: enterprise-opa
          persist-credentials: false
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: enterprise-opa/go.sum
          check-latest: true
      - name: pick up opa version
        id: enterprise-opa
        run: echo "opa_version=v$(build/get-opa-version.sh)" >> $GITHUB_OUTPUT
        working-directory: enterprise-opa
      - name: checkout OPA
        uses: actions/checkout@v4
        with:
          repository: open-policy-agent/opa
          ref: ${{ steps.enterprise-opa.outputs.opa_version }}
          path: opa
          persist-credentials: false
      - name: pick up opa directory
        id: opa
        working-directory: opa
        run: echo "dir=$(pwd)" >> $GITHUB_OUTPUT
      - name: setup testcontainers-go properties
        run: cp -v testcontainers.properties ~/.testcontainers.properties
        working-directory: enterprise-opa
      - run: make test
        working-directory: enterprise-opa
        env:
          OPA_ROOT: ${{ steps.opa.outputs.dir }}
      - run: make test-examples-sdk test-examples-rego
        working-directory: enterprise-opa
      - name: smoke test regal build
        run: |
          go mod tidy
          go build -o regal main.go
        working-directory: enterprise-opa/examples/regal
        env:
          GOPRIVATE: github.com/styrainc/

  test-e2e:
    name: Test E2E
    runs-on: ubuntu-22.04
    needs:
    - build
    - goreleaser
    environment: ci
    steps:
      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_ID }}
          private_key: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_PEM_KEY }}
      - name: Override GH Token Env Var
        run: echo "GH_API_TOKEN=${{ steps.generate_token.outputs.token }}" >> $GITHUB_ENV
      - uses: open-policy-agent/setup-opa@v2
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: setup testcontainers-go properties
        run: cp -v testcontainers.properties ~/.testcontainers.properties
      - uses: asdf-vm/actions/install@v3
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
      - name: Setup github api token
        run: git config --global url.https://git:$GH_API_TOKEN@github.com/.insteadOf https://github.com/
      - name: Download image tarball
        uses: actions/download-artifact@v3
        with:
          name: image
      - name: Download binary tarball
        uses: actions/download-artifact@v3
        with:
          name: binary
      - name: Enterprise OPA image and binary, syncmock
        id: enterprise-opa
        run: |
          echo "image=$(docker load --quiet --input local.tar | awk '{print $3}')" >> $GITHUB_OUTPUT
          go build -o syncmock ./extras/cmd/syncmock
          echo "binary=$(pwd)/eopa" >> $GITHUB_OUTPUT
          pwd >> $GITHUB_PATH
          chmod +x eopa
      - run: make e2e
        env:
          IMAGE: ${{ steps.enterprise-opa.outputs.image }}
          BINARY: ${{ steps.enterprise-opa.outputs.binary }}
          EOPA_LICENSE_TOKEN: ${{ secrets.STYRA_LOAD_LICENSE_TOKEN }}
          # credentials for data.git plugin
          GIT_GITHUB_TOKEN: ${{ secrets.E2E_GIT_GITHUB_TOKEN }}
          GIT_AZURE_TOKEN: ${{ secrets.E2E_GIT_AZURE_TOKEN }}
          GIT_GITLAB_TOKEN: ${{ secrets.E2E_GIT_GITLAB_TOKEN }}

  proto-docs-push:
    name: Push Protobuf docs to BSR
    runs-on: ubuntu-22.04
    environment: ci
    steps:
      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_ID }}
          private_key: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_PEM_KEY }}
      - name: Override GH Token Env Var
        run: echo "GH_API_TOKEN=${{ steps.generate_token.outputs.token }}" >> $GITHUB_ENV
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # Do a pre-flight check to ensure we don't push up a BSR draft for
      # PRs that don't touch the protobuf files at all.
      - name: Check for proto/ file changes in git diffs.
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            proto:
              - 'proto/**'
      # Note(philip): We need to install the `buf` CLI before we can lint our protobuf sources.
      # The action uses the repo-scoped GITHUB_TOKEN to allow one of its dependencies (Octokit)
      # to skip Github API rate limits when fetching the latest buf build artifact.
      - uses: bufbuild/buf-setup-action@v1
        if: steps.changes.outputs.proto == 'true'
        with:
          github_token: ${{ steps.generate_token.outputs.token }}
      - uses: bufbuild/buf-push-action@v1
        if: steps.changes.outputs.proto == 'true'
        with:
          buf_token: ${{ secrets.BUF_TOKEN }}
          draft: true
          input: proto

  build:
    name: Ko Build
    runs-on: ubuntu-22.04
    environment: ci
    steps:
      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_ID }}
          private_key: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_PEM_KEY }}
      - name: Override GH Token Env Var
        run: echo "GH_API_TOKEN=${{ steps.generate_token.outputs.token }}" >> $GITHUB_ENV
      - uses: open-policy-agent/setup-opa@v2
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
      - name: Setup github api token
        run: git config --global url.https://git:$GH_API_TOKEN@github.com/.insteadOf https://github.com/
      - uses: ko-build/setup-ko@v0.6
      - name: Build
        run: make build
      - name: Upload image tarball
        uses: actions/upload-artifact@v3
        with:
          name: image
          path: local.tar

  goreleaser:
    name: Goreleaser build
    runs-on: ubuntu-22.04
    environment: ci
    steps:
      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_ID }}
          private_key: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_PEM_KEY }}
      - name: Override GH Token Env Var
        run: echo "GH_API_TOKEN=${{ steps.generate_token.outputs.token }}" >> $GITHUB_ENV
      - uses: open-policy-agent/setup-opa@v2
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
      - name: Setup github api token
        run: git config --global url.https://git:$GH_API_TOKEN@github.com/.insteadOf https://github.com/
      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          install-only: true
      - name: GoReleaser (single)
        run: make release-single
        env:
          HOSTNAME: github.actions.local
          GITHUB_TOKEN: ${{ secrets.GH_API_TOKEN }}
      - name: Upload binary tarball
        uses: actions/upload-artifact@v3
        with:
          name: binary
          path: dist/linux-windows-build_linux_amd64_v1/eopa

  smoke-cli:
    name: Smoke Test CLI
    runs-on: ubuntu-22.04
    needs: build
    environment: ci
    steps:
      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_ID }}
          private_key: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_PEM_KEY }}
      - name: Override GH Token Env Var
        run: echo "GH_API_TOKEN=${{ steps.generate_token.outputs.token }}" >> $GITHUB_ENV
      - name: Check out code
        uses: actions/checkout@v4
      - name: Download image tarball
        uses: actions/download-artifact@v3
        with:
          name: image
      - name: Enterprise OPA image
        id: enterprise-opa
        run: echo "image=$(docker load --quiet --input local.tar | awk '{print $3}')" >> $GITHUB_OUTPUT
      - run: make test
        working-directory: e2e/cli
        env:
          EOPA_LICENSE_TOKEN: ${{ secrets.STYRA_LOAD_LICENSE_TOKEN }}
          IMAGE: ${{ steps.enterprise-opa.outputs.image }}

  performance-related:
    name: Performance
    runs-on: ubuntu-22.04
    environment: ci
    steps:
      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_ID }}
          private_key: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_PEM_KEY }}
      - name: Override GH Token Env Var
        run: echo "GH_API_TOKEN=${{ steps.generate_token.outputs.token }}" >> $GITHUB_ENV
      - name: Setup github api token
        run: git config --global url.https://git:$GH_API_TOKEN@github.com/StyraInc.insteadOf https://github.com/StyraInc
      - uses: actions/checkout@v4
        with:
          path: enterprise-opa

        # diffheap
      - uses: actions/checkout@v4
        with:
          path: main
          ref: ${{ github.event.pull_request.base.ref }}
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: main/go.sum
          check-latest: true
      - name: Set up diffheap util
        run: go install github.com/srenatus/diffheap@latest
      - run: diffheap ./pkg/vm > ../branch.out
        working-directory: enterprise-opa
      - run: diffheap ./pkg/vm > ../main.out
        working-directory: main
      - uses: int128/diff-action@v1
        with:
          base: main.out
          head: branch.out
          comment-header: "escape analysis differences"
          comment-footer: "This is informational. I does not indicate a problem with the code change."

        # benchmark, gobenchdata
      - run: make benchmark
        working-directory: enterprise-opa
      - name: gobenchdata check
        if: ${{ github.ref != 'refs/heads/main' && github.actor != 'dependabot[bot]' }}
        run: go run go.bobheadxi.dev/gobenchdata@v1 action
        env:
          INPUT_GO_TEST_FLAGS: -tags use_opa_fork -timeout=10m
          INPUT_SUBDIRECTORY: enterprise-opa
          INPUT_CHECKS: true
          INPUT_CHECKS_CONFIG: enterprise-opa/gobenchdata-checks.yml
          INPUT_PUBLISH_BRANCH: benchmarks
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        timeout-minutes: 10

  cross-build:
    runs-on: ubuntu-22.04
    environment: ci
    strategy:
      fail-fast: true
      matrix:
        include:
          - GOOS: windows
            GOARCH: amd64
            reldir: dist/linux-windows-build_windows_amd64_v1
          - GOOS: linux
            GOARCH: amd64
            reldir: dist/linux-windows-build_linux_amd64_v1
          - GOOS: darwin
            GOARCH: amd64
            reldir: dist/darwin-build_darwin_amd64_v1
    steps:
      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_ID }}
          private_key: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_PEM_KEY }}
      - name: Override GH Token Env Var
        run: echo "GH_API_TOKEN=${{ steps.generate_token.outputs.token }}" >> $GITHUB_ENV
      - name: setup github api token
        run: git config --global url.https://git:$GH_API_TOKEN@github.com/.insteadOf https://github.com/
      - name: Check out code
        uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
      - uses: turtlequeue/setup-babashka@v1.5.2
        with:
          babashka-version: 1.3.186
      - run: bb build/cross-build
        env:
          TESTDIR: test/${{ matrix.GOOS }}_${{ matrix.GOARCH }}
          RELDIR: ${{ matrix.reldir }}
          GOOS: ${{ matrix.GOOS }}
          GOARCH: ${{ matrix.GOARCH }}
      - name: Upload cross-build binaries
        uses: actions/upload-artifact@v3
        with:
          name: cross-binaries
          path: dist
      - name: Upload test binaries
        uses: actions/upload-artifact@v3
        with:
          name: test-binaries
          path: test

  cross-test-releases:
    name: Cross Test Releases
    runs-on: ${{ matrix.os }}
    needs:
    - cross-build
    environment: ci
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            reldir: dist/linux-windows-build_linux_amd64_v1
            testdir: test/linux_amd64
          - os: macos-latest
            reldir: dist/darwin-build_darwin_amd64_v1
            testdir: test/darwin_amd64
          - os: windows-latest
            reldir: dist/linux-windows-build_windows_amd64_v1
            testdir: test/windows_amd64
    steps:
      - name: Download cross-build binaries
        uses: actions/download-artifact@v3
        with:
          name: cross-binaries
          path: dist
      - name: Download test binaries
        uses: actions/download-artifact@v3
        with:
          name: test-binaries
          path: test
      - uses: turtlequeue/setup-babashka@v1.5.2
        with:
          babashka-version: 1.3.186
      - run: bb ${{ matrix.testdir }}/cross-run
        env:
          TESTDIR: ${{ matrix.testdir }}
          RELDIR: ${{ matrix.reldir }}
