name: Check

on:
  workflow_dispatch: {}
  pull_request:
    branches: [ main ]

# When a new revision is pushed to a PR, cancel all in-progress CI runs for that
# PR. See https://docs.github.com/en/actions/using-jobs/using-concurrency
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  GOPRIVATE: github.com/StyraInc/opa

jobs:
  lint:
    name: Analysis & Linting
    runs-on: ubuntu-22.04
    environment: ci
    env:
      GH_API_TOKEN: ${{ secrets.GH_API_TOKEN }}
    steps:
      - name: (Dependabot Only) Generate GitHub App Token
        if: ${{ github.actor == 'dependabot[bot]' }}
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_ID }}
          private_key: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_PEM_KEY }}
      - name: (Dependabot Only) Override GH Token Env Var
        if: ${{ github.actor == 'dependabot[bot]' }}
        id: override_gh_api_token
        run:
          echo "GH_API_TOKEN=${{ steps.generate_token.outputs.token }}" >> $GITHUB_ENV
      - name: Setup github api token
        run: git config --global url.https://git:$GH_API_TOKEN@github.com/.insteadOf https://github.com/
      # NOTE(sr): we need to install this before checking out the code, as it will otherwise
      # interfere with the project's go.mod/go.sum
      - name: install gcassert
        run: go install github.com/jordanlewis/gcassert/cmd/gcassert@latest
        working-directory: /tmp
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
          check-latest: true
          cache: true
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.51.0
          skip-pkg-cache: true
          skip-build-cache: true
      - name: gcassert
        run: gcassert ./...
      # Note(philip): We need to install the `buf` CLI before we can lint our protobuf sources.
      # The action uses the repo-scoped GITHUB_TOKEN to allow one of its dependencies (Octokit)
      # to skip Github API rate limits when fetching the latest buf build artifact.
      - uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - uses: bufbuild/buf-lint-action@v1
        with:
          input: proto
      # Now that we've passed linting, we check to make sure the build artifacts are identical
      # to what was checked in.
      - name: Install protoc-gen-go dependencies
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28.1
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2.0
      - name: Fail if `buf generate` diff detected between generated/checked in files
        run: |-
          cd proto && buf generate
          if [[ "$(git diff --name-status | wc -l)" != 0 ]]; then
            echo "::error:: Files with diffs: $(git diff --name-status)"
            echo "::error:: Diffs are: $(git diff)"
            echo "::info:: If the diffs above include the protoc version number, consider reinstalling to get the latest protbuf/grpc tooling."
            exit 1
          fi

  test:
    name: Test
    runs-on: ubuntu-22.04
    environment: ci
    env:
      GH_API_TOKEN: ${{ secrets.GH_API_TOKEN }}
    steps:
      - name: (Dependabot Only) Generate GitHub App Token
        if: ${{ github.actor == 'dependabot[bot]' }}
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_ID }}
          private_key: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_PEM_KEY }}
      - name: (Dependabot Only) Override GH Token Env Var
        if: ${{ github.actor == 'dependabot[bot]' }}
        id: override_gh_api_token
        run:
          echo "GH_API_TOKEN=${{ steps.generate_token.outputs.token }}" >> $GITHUB_ENV
      - uses: open-policy-agent/setup-opa@v2
      - name: checkout Load
        uses: actions/checkout@v3
        with:
          path: load
      - uses: actions/setup-go@v3
        with:
          go-version-file: load/go.mod
          cache-dependency-path: load/go.sum
          check-latest: true
          cache: true
      - name: pick up opa version
        id: load
        run: echo "opa_version=v$(build/get-opa-version.sh)" >> $GITHUB_OUTPUT
        working-directory: load
      - name: checkout OPA
        uses: actions/checkout@v3
        with:
          repository: open-policy-agent/opa
          ref: ${{ steps.load.outputs.opa_version }}
          path: opa
      - name: pick up opa directory
        id: opa
        working-directory: opa
        run: echo "dir=$(pwd)" >> $GITHUB_OUTPUT
      - name: setup github api token
        run: git config --global url.https://git:$GH_API_TOKEN@github.com/.insteadOf https://github.com/
      - run: make test
        working-directory: load
        env:
          OPA_ROOT: ${{ steps.opa.outputs.dir }}
      - run: make benchmark
        working-directory: load
      - name: gobenchdata check
        run: go run go.bobheadxi.dev/gobenchdata@v1 action
        env:
          INPUT_GO_TEST_FLAGS: -timeout=10m
          INPUT_SUBDIRECTORY: load
          INPUT_CHECKS: true
          INPUT_CHECKS_CONFIG: load/gobenchdata-checks.yml
          INPUT_PUBLISH_BRANCH: benchmarks
          GITHUB_TOKEN: ${{ secrets.GH_API_TOKEN }}
        timeout-minutes: 10
        if: github.ref != 'refs/heads/main' # do not run for commits on main

  test-e2e:
    name: Test E2E
    runs-on: ubuntu-22.04
    needs: build
    environment: ci
    env:
      GH_API_TOKEN: ${{ secrets.GH_API_TOKEN }}
    steps:
      - name: (Dependabot Only) Generate GitHub App Token
        if: ${{ github.actor == 'dependabot[bot]' }}
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_ID }}
          private_key: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_PEM_KEY }}
      - name: (Dependabot Only) Override GH Token Env Var
        if: ${{ github.actor == 'dependabot[bot]' }}
        id: override_gh_api_token
        run:
          echo "GH_API_TOKEN=${{ steps.generate_token.outputs.token }}" >> $GITHUB_ENV
      - uses: open-policy-agent/setup-opa@v2
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
          check-latest: true
          cache: true
      - name: Setup github api token
        run: git config --global url.https://git:$GH_API_TOKEN@github.com/.insteadOf https://github.com/
      - name: Download image tarball
        uses: actions/download-artifact@v3
        with:
          name: image
      - name: Load image
        id: load
        run: |
          echo "image=$(docker load --quiet --input local.tar | awk '{print $3}')" >> $GITHUB_OUTPUT
          echo "bundles=$(pwd)/e2e" >> $GITHUB_OUTPUT
      - run: make e2e
        env:
          IMAGE: ${{ steps.load.outputs.image }}
          STYRA_LOAD_LICENSE_TOKEN: ${{ secrets.STYRA_LOAD_LICENSE_TOKEN }}
      # If it's a dependabot run, we fetch the token from the environment directly.
      - name: (Dependabot Only) checkout opa-testing-e2e
        if: ${{ github.actor == 'dependabot[bot]' }}
        uses: actions/checkout@v3
        with:
          repository: StyraInc/opa-testing-e2e
          path: _e2e
          token: ${{ env.GH_API_TOKEN }}
          persist-credentials: false
      # Else, we use the repo secret directly.
      - name: checkout opa-testing-e2e
        if: ${{ github.actor != 'dependabot[bot]' }}
        uses: actions/checkout@v3
        with:
          repository: StyraInc/opa-testing-e2e
          path: _e2e
          token: ${{ secrets.GH_API_TOKEN }}
          persist-credentials: false
      - name: run "opa-testing-e2e"
        run: make test
        working-directory: _e2e
        env:
          STYRA_LOAD_LICENSE_TOKEN: ${{ secrets.STYRA_LOAD_LICENSE_TOKEN }}
          IMAGE: ${{ steps.load.outputs.image }}
          BUNDLES: ${{ steps.load.outputs.bundles }}
          BUNDLE_FILE_PATH: bundles/systems/bc01d50d17d7446684c4e6c34a1ad07f
          NUM_INPUT_BUNDLES: 2
          BUNDLE_HOST: 172.17.0.1

  goreleaser:
    name: GoReleaser
    runs-on: ubuntu-22.04
    environment: ci
    env:
      GH_API_TOKEN: ${{ secrets.GH_API_TOKEN }}
    steps:
      - name: (Dependabot Only) Generate GitHub App Token
        if: ${{ github.actor == 'dependabot[bot]' }}
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_ID }}
          private_key: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_PEM_KEY }}
      - name: (Dependabot Only) Override GH Token Env Var
        if: ${{ github.actor == 'dependabot[bot]' }}
        id: override_gh_api_token
        run:
          echo "GH_API_TOKEN=${{ steps.generate_token.outputs.token }}" >> $GITHUB_ENV
      - uses: open-policy-agent/setup-opa@v2
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
          check-latest: true
          cache: true
      - name: setup github api token
        run: git config --global url.https://git:$GH_API_TOKEN@github.com/.insteadOf https://github.com/
      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          install-only: true
      - name: Make GoReleaser
        run: make release
        env:
          HOSTNAME: github.actions.local
          GITHUB_TOKEN: ${{ secrets.GH_API_TOKEN }}
      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: |
            dist/checksums.txt
            dist/load_*/*

  build:
    name: Ko Build
    runs-on: ubuntu-22.04
    environment: ci
    env:
      GH_API_TOKEN: ${{ secrets.GH_API_TOKEN }}
    steps:
      - name: (Dependabot Only) Generate GitHub App Token
        if: ${{ github.actor == 'dependabot[bot]' }}
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_ID }}
          private_key: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_PEM_KEY }}
      - name: (Dependabot Only) Override GH Token Env Var
        if: ${{ github.actor == 'dependabot[bot]' }}
        id: override_gh_api_token
        run:
          echo "GH_API_TOKEN=${{ steps.generate_token.outputs.token }}" >> $GITHUB_ENV
      - uses: open-policy-agent/setup-opa@v2
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
          check-latest: true
          cache: true
      - name: Setup github api token
        run: git config --global url.https://git:$GH_API_TOKEN@github.com/.insteadOf https://github.com/
      - uses: ko-build/setup-ko@v0.6
      - name: Build
        run: make build
      - name: Upload image tarball
        uses: actions/upload-artifact@v3
        with:
          name: image
          path: local.tar

  smoke-cli:
    name: Smoke Test CLI
    runs-on: ubuntu-22.04
    needs: build
    environment: ci
    steps:
      - name: (Dependabot Only) Generate GitHub App Token
        if: ${{ github.actor == 'dependabot[bot]' }}
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_ID }}
          private_key: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_PEM_KEY }}
      - name: (Dependabot Only) Override GH Token Env Var
        if: ${{ github.actor == 'dependabot[bot]' }}
        id: override_gh_api_token
        run:
          echo "GH_API_TOKEN=${{ steps.generate_token.outputs.token }}" >> $GITHUB_ENV
      - name: Check out code
        uses: actions/checkout@v3
      - name: Download image tarball
        uses: actions/download-artifact@v3
        with:
          name: image
      - name: Load image
        id: load
        run: echo "image=$(docker load --quiet --input local.tar | awk '{print $3}')" >> $GITHUB_OUTPUT
      - run: make test
        working-directory: e2e/cli
        env:
          STYRA_LOAD_LICENSE_TOKEN: ${{ secrets.STYRA_LOAD_LICENSE_TOKEN }}
          IMAGE: ${{ steps.load.outputs.image }}

  smoke-test-releases:
    name: Smoke Test Releases
    runs-on: ${{ matrix.os }}
    needs: goreleaser
    environment: ci
    env:
      GH_API_TOKEN: ${{ secrets.GH_API_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            exec: dist/load_linux_amd64_v1/load
          - os: ubuntu-22.04
            exec: dist/load_linux_arm64/load
            arch: arm64
          - os: macos-latest
            exec: dist/load_darwin_amd64_v1/load
          - os: windows-latest
            exec: dist/load_windows_amd64_v1/load.exe

    steps:
      - name: (Dependabot Only) Generate GitHub App Token
        if: ${{ github.actor == 'dependabot[bot]' }}
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_ID }}
          private_key: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_PEM_KEY }}
      - name: (Dependabot Only) Override GH Token Env Var
        if: ${{ github.actor == 'dependabot[bot]' }}
        id: override_gh_api_token
        run:
          echo "GH_API_TOKEN=${{ steps.generate_token.outputs.token }}" >> $GITHUB_ENV
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64
        if: matrix.arch == 'arm64'
      - name: Check out code
        uses: actions/checkout@v3
      - name: Download release binaries
        uses: actions/download-artifact@v3
        with:
          name: binaries
          path: dist
      - name: Test binaries
        run: make ci-smoke-test BINARY=${{ matrix.exec }}
        env:
          STYRA_LOAD_LICENSE_TOKEN: ${{ secrets.STYRA_LOAD_LICENSE_TOKEN }}
