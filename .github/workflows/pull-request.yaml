name: Check

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# When a new revision is pushed to a PR, cancel all in-progress CI runs for that
# PR. See https://docs.github.com/en/actions/using-jobs/using-concurrency
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test
    runs-on: ubuntu-22.04
    environment: ci
    env:
      GH_API_TOKEN: ${{ secrets.GH_API_TOKEN }}
    steps:
      - uses: actions/setup-go@v3
      - name: checkout Load
        uses: actions/checkout@v3
        with:
          path: load
      - name: checkout OPA
        uses: actions/checkout@v3
        with:
          repository: open-policy-agent/opa
          ref: v0.44.0 # TODO(sr): make this pick up the depended-upon version via the build script
          path: opa
      - name: pick up opa directory
        id: opa
        working-directory: opa
        run: echo "::set-output name=dir::$(pwd)"
      - name: setup github api token
        run: git config --global url.https://$GH_API_TOKEN@github.com/.insteadOf https://github.com/
      - run: make test
        working-directory: load
        env:
          OPA_ROOT: ${{ steps.opa.outputs.dir }}

  test-e2e:
    name: Test E2E
    runs-on: ubuntu-22.04
    needs: build
    environment: ci
    env:
      GH_API_TOKEN: ${{ secrets.GH_API_TOKEN }}
    steps:
      - uses: actions/setup-go@v3
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup github api token
        run: git config --global url.https://$GH_API_TOKEN@github.com/.insteadOf https://github.com/
      - uses: imjasonh/setup-ko@v0.6
      - name: Download image tarball
        uses: actions/download-artifact@v3
        with:
          name: image
      - name: Load image
        id: load
        run:  echo "::set-output name=image::$(docker load --quiet --input local.tar | awk '{print $3}')"
      - name: checkout opa-testing-e2e
        uses: actions/checkout@v3
        with:
          repository: StyraInc/opa-testing-e2e
          ref: sr/load # TODO: that branch has a discovery doc enabling the rego plugin (https://github.com/StyraInc/load/issues/25)
          path: e2e
          token: ${{ secrets.GH_API_TOKEN }}
          persist-credentials: false
      - run: make test
        working-directory: e2e
        env:
          IMAGE: ${{ steps.load.outputs.image }}
          BUNDLE_HOST: 172.17.0.1

  build:
    name: Ko Build
    runs-on: ubuntu-22.04
    environment: ci
    env:
      GH_API_TOKEN: ${{ secrets.GH_API_TOKEN }}
    steps:
      - uses: actions/setup-go@v3
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup github api token
        run: git config --global url.https://$GH_API_TOKEN@github.com/.insteadOf https://github.com/
      - uses: imjasonh/setup-ko@v0.6
      - name: Build
        run: make build
      - name: Upload image tarball
        uses: actions/upload-artifact@v3
        with:
          name: image
          path: local.tar

  deploy:
    name: Push Latest Release
    if: github.ref == 'refs/heads/main' # only true for pushes to `main`
    runs-on: ubuntu-22.04
    environment: ci
    env:
      GH_API_TOKEN: ${{ secrets.GH_API_TOKEN }}
    steps:
      - uses: actions/setup-go@v3
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup github api token
        run: git config --global url.https://$GH_API_TOKEN@github.com/.insteadOf https://github.com/
      - uses: imjasonh/setup-ko@v0.6
        env:
          KO_DOCKER_REPO: 547414210802.dkr.ecr.us-east-1.amazonaws.com/styra
      - name: Build and Push
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        # Only run if required secrets are provided
        if: ${{ env.AWS_ACCESS_KEY_ID && env.AWS_SECRET_ACCESS_KEY }}
        run: make deploy-ci
