name: Check

on:
  workflow_dispatch: {}
  pull_request: {}

# When a new revision is pushed to a PR, cancel all in-progress CI runs for that
# PR. See https://docs.github.com/en/actions/using-jobs/using-concurrency
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  GOPRIVATE: github.com/StyraInc/opa
  REGAL_VERSION: 0.29.2
  BB_VERSION: 1.12.195

jobs:
  lint:
    name: Analysis & Linting
    runs-on: ubuntu-22.04
    steps:
      - name: Tune GitHub-hosted runner network
        uses: smorimoto/tune-github-hosted-runner-network@v1
      - name: Free disk space
        run: |
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo apt clean
          docker rmi $(docker image ls -aq)
          df -h
      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_ID }}
          private_key: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_PEM_KEY }}
      - name: Override GH Token Env Var
        run: echo "GH_API_TOKEN=${{ steps.generate_token.outputs.token }}" >> $GITHUB_ENV
      - name: Setup github api token
        run: git config --global url.https://git:$GH_API_TOKEN@github.com/.insteadOf https://github.com/
      - uses: actions/checkout@v4
      - id: go_version
        name: Read go version
        run: echo "go_version=$(cat .go-version)" >> $GITHUB_OUTPUT
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ steps.go_version.outputs.go_version }}
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.60.1
          args: --timeout=10m --out-format=colored-line-number,github-actions
      # Do a pre-flight check to ensure we don't bother with `buf` unless
      # we have protobuf changes present.
      - name: Check for proto/ file changes in git diffs.
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            proto:
              - 'proto/**'
      # Note(philip): We need to install the `buf` CLI before we can lint our protobuf sources.
      # The action uses the repo-scoped GITHUB_TOKEN to allow one of its dependencies (Octokit)
      # to skip Github API rate limits when fetching the latest buf build artifact.
      - uses: bufbuild/buf-setup-action@v1
        if: steps.changes.outputs.proto == 'true'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - uses: bufbuild/buf-lint-action@v1
        if: steps.changes.outputs.proto == 'true'
        with:
          input: proto
      # Now that we've passed linting, we check to make sure the build artifacts are identical
      # to what was checked in.
      - name: Install protoc-gen-go dependencies
        if: steps.changes.outputs.proto == 'true'
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.30.0
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2.0
      - name: Fail if `buf generate` diff detected between generated/checked in files
        if: steps.changes.outputs.proto == 'true'
        run: |-
          cd proto && buf generate
          if [[ "$(git diff --name-status | wc -l)" != 0 ]]; then
            echo "::error:: Files with diffs: $(git diff --name-status)"
            echo "::error:: Diffs are: $(git diff)"
            echo "::info:: If the diffs above include the protoc version number, consider reinstalling to get the latest protbuf/grpc tooling."
            exit 1
          fi
      - name: Setup Regal
        uses: StyraInc/setup-regal@v1.0.0
        with:
          version: ${{ env.REGAL_VERSION }}
      - name: Run Regal Lint
        run: regal lint --format github . || exit 0

  test:
    name: Test
    runs-on: ubuntu-22.04
    steps:
      - name: Tune GitHub-hosted runner network
        uses: smorimoto/tune-github-hosted-runner-network@v1
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@v1.3.1
      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_ID }}
          private_key: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_PEM_KEY }}
      - name: Override GH Token Env Var
        run: echo "GH_API_TOKEN=${{ steps.generate_token.outputs.token }}" >> $GITHUB_ENV
      - name: Setup github api token
        run: git config --global url.https://git:$GH_API_TOKEN@github.com/.insteadOf https://github.com/
      - uses: open-policy-agent/setup-opa@v2
      - name: checkout Enterprise OPA
        uses: actions/checkout@v4
        with:
          path: enterprise-opa
          persist-credentials: false
      - id: enterprise-opa
        name: read versions
        run: |
          echo "go_version=$(cat .go-version)" >> $GITHUB_OUTPUT
          echo "opa_version=v$(build/get-opa-version.sh)" >> $GITHUB_OUTPUT
        working-directory: enterprise-opa
      - uses: actions/setup-go@v5
        with:
          cache-dependency-path: enterprise-opa/go.sum
          go-version: ${{ steps.enterprise-opa.outputs.go_version }}
      - name: checkout OPA
        uses: actions/checkout@v4
        with:
          repository: open-policy-agent/opa
          ref: ${{ steps.enterprise-opa.outputs.opa_version }}
          path: opa
          persist-credentials: false
      - name: pick up opa directory
        id: opa
        working-directory: opa
        run: echo "dir=$(pwd)" >> $GITHUB_OUTPUT
      - run: make test
        working-directory: enterprise-opa
        env:
          OPA_ROOT: ${{ steps.opa.outputs.dir }}
      - run: make test-examples-sdk test-examples-rego
        working-directory: enterprise-opa
      - name: smoke test regal build
        run: |
          go mod tidy
          go build -o regal main.go
        working-directory: enterprise-opa/examples/regal
        env:
          GOPRIVATE: github.com/styrainc/

  test-e2e:
    name: Test E2E
    runs-on: ubuntu-22.04
    needs:
      - goreleaser
    steps:
      - name: Tune GitHub-hosted runner network
        uses: smorimoto/tune-github-hosted-runner-network@v1
      - name: Free disk space
        run: |
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo apt clean
          docker rmi $(docker image ls -aq)
          df -h
      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_ID }}
          private_key: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_PEM_KEY }}
      - name: Override GH Token Env Var
        run: echo "GH_API_TOKEN=${{ steps.generate_token.outputs.token }}" >> $GITHUB_ENV
      - uses: open-policy-agent/setup-opa@v2
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: asdf-vm/actions/install@v3
      - id: go_version
        name: Read go version
        run: echo "go_version=$(cat .go-version)" >> $GITHUB_OUTPUT
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ steps.go_version.outputs.go_version }}
      - name: Setup github api token
        run: git config --global url.https://git:$GH_API_TOKEN@github.com/.insteadOf https://github.com/
      - name: Download binary tarball
        uses: actions/download-artifact@v4
        with:
          name: binary
      - uses: actions/setup-node@v4
        with:
          node-version: "22"
      - name: Enterprise OPA image and binary, syncmock
        id: enterprise-opa
        run: |
          go build -o syncmock ./extras/cmd/syncmock
          go build -o loginmock ./extras/cmd/loginmock
          echo "binary=$(pwd)/eopa" >> $GITHUB_OUTPUT
          pwd >> $GITHUB_PATH
          chmod +x eopa
      - name: Prep e2e prisma tests
        run: npm ci
        working-directory: e2e/prisma
      - run: make e2e
        env:
          BINARY: ${{ steps.enterprise-opa.outputs.binary }}
          EOPA_LICENSE_TOKEN: ${{ secrets.STYRA_LOAD_LICENSE_TOKEN }}
          # credentials for data.git plugin
          GIT_GITHUB_TOKEN: ${{ secrets.E2E_GIT_GITHUB_TOKEN }}
          GIT_AZURE_TOKEN: ${{ secrets.E2E_GIT_AZURE_TOKEN }}
          GIT_GITLAB_TOKEN: ${{ secrets.E2E_GIT_GITLAB_TOKEN }}
      - name: display go.sum diff
        run: |
          git diff --exit-code go.sum && exit 0
          echo "# go.sum diff" >> $GITHUB_STEP_SUMMARY
          echo '```diff' >> $GITHUB_STEP_SUMMARY
          git diff go.sum >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        working-directory: e2e

  proto-docs-push:
    name: Push Protobuf docs to BSR
    runs-on: ubuntu-22.04
    steps:
      - name: Tune GitHub-hosted runner network
        uses: smorimoto/tune-github-hosted-runner-network@v1
      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_ID }}
          private_key: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_PEM_KEY }}
      - name: Override GH Token Env Var
        run: echo "GH_API_TOKEN=${{ steps.generate_token.outputs.token }}" >> $GITHUB_ENV
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # Do a pre-flight check to ensure we don't push up a BSR draft for
      # PRs that don't touch the protobuf files at all.
      - name: Check for proto/ file changes in git diffs.
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            proto:
              - 'proto/**'
      # Note(philip): We need to install the `buf` CLI before we can lint our protobuf sources.
      # The action uses the repo-scoped GITHUB_TOKEN to allow one of its dependencies (Octokit)
      # to skip Github API rate limits when fetching the latest buf build artifact.
      - uses: bufbuild/buf-setup-action@v1
        if: steps.changes.outputs.proto == 'true'
        with:
          github_token: ${{ steps.generate_token.outputs.token }}
      - uses: bufbuild/buf-push-action@v1
        if: steps.changes.outputs.proto == 'true'
        with:
          buf_token: ${{ secrets.BUF_TOKEN }}
          draft: true
          input: proto

  build:
    name: Ko Build
    runs-on: ubuntu-22.04
    steps:
      - name: Tune GitHub-hosted runner network
        uses: smorimoto/tune-github-hosted-runner-network@v1
      - name: Free disk space
        run: |
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo apt clean
          docker rmi $(docker image ls -aq)
          df -h
      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_ID }}
          private_key: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_PEM_KEY }}
      - name: Override GH Token Env Var
        run: echo "GH_API_TOKEN=${{ steps.generate_token.outputs.token }}" >> $GITHUB_ENV
      - uses: open-policy-agent/setup-opa@v2
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: go_version
        name: Read go version
        run: echo "go_version=$(cat .go-version)" >> $GITHUB_OUTPUT
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ steps.go_version.outputs.go_version }}
      - name: Setup github api token
        run: git config --global url.https://git:$GH_API_TOKEN@github.com/.insteadOf https://github.com/
      - uses: ko-build/setup-ko@v0.7
      - name: Check for base image changes (apko.yaml, apko-debug.yaml)
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            apko:
              - 'apko*.yaml'
      - name: Install apko
        uses: jaxxstorm/action-install-gh-release@v1.14.0
        with:
          repo: chainguard-dev/apko
          tag: v0.14.7
          cache: enable
          binaries-location: apko_0.14.7_linux_amd64
        if: steps.changes.outputs.apko == 'true'
      - name: Build images
        run: make build build-debug
        env:
          SKIP_IMAGES: ${{ steps.changes.outputs.apko == 'false' }}
      - name: Upload image tarball
        uses: actions/upload-artifact@v4
        with:
          name: image
          path: local.tar
      - name: Upload debug image tarball
        uses: actions/upload-artifact@v4
        with:
          name: image-debug
          path: local-debug.tar

  goreleaser:
    name: Goreleaser build
    runs-on: ubuntu-22.04
    steps:
      - name: Tune GitHub-hosted runner network
        uses: smorimoto/tune-github-hosted-runner-network@v1
      - name: Free disk space
        run: |
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo apt clean
          docker rmi $(docker image ls -aq)
          df -h
      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_ID }}
          private_key: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_PEM_KEY }}
      - name: Override GH Token Env Var
        run: echo "GH_API_TOKEN=${{ steps.generate_token.outputs.token }}" >> $GITHUB_ENV
      - uses: open-policy-agent/setup-opa@v2
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: go_version
        name: Read go version
        run: echo "go_version=$(cat .go-version)" >> $GITHUB_OUTPUT
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ steps.go_version.outputs.go_version }}
      - name: Setup github api token
        run: git config --global url.https://git:$GH_API_TOKEN@github.com/.insteadOf https://github.com/
      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          install-only: true
      - name: GoReleaser (single)
        run: make release-single
        env:
          HOSTNAME: github.actions.local
          GITHUB_TOKEN: ${{ secrets.GH_API_TOKEN }}
          EOPA_TELEMETRY_URL: http://127.0.0.1:9191
      - name: Upload binary tarball
        uses: actions/upload-artifact@v4
        with:
          name: binary
          path: dist/linux-windows-build_linux_amd64_v1/eopa

  smoke-docker:
    name: Smoke test docker images
    runs-on: ubuntu-22.04
    needs: build
    steps:
      - name: Tune GitHub-hosted runner network
        uses: smorimoto/tune-github-hosted-runner-network@v1
      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_ID }}
          private_key: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_PEM_KEY }}
      - name: Override GH Token Env Var
        run: echo "GH_API_TOKEN=${{ steps.generate_token.outputs.token }}" >> $GITHUB_ENV
      - name: Check out code
        uses: actions/checkout@v4
      - name: install skopeo
        uses: jaxxstorm/action-install-gh-release@v1.14.0
        with:
          repo: lework/skopeo-binary
          extension-matching: disable
          tag: v1.16.0
          cache: enable
          rename-to: skopeo
          chmod: 0755
      - name: Download image tarball
        uses: actions/download-artifact@v4
        with:
          name: image
      - name: Download debug image tarball
        uses: actions/download-artifact@v4
        with:
          name: image-debug
      - name: load images
        run: |
          skopeo copy docker-archive:local.tar docker-daemon:ko.local/enterprise-opa-private:edge
          skopeo copy docker-archive:local-debug.tar docker-daemon:ko.local/enterprise-opa-private:edge-debug
      - name: docker build based on image
        run: |
          docker build -t test .
          docker run test eopa version
        working-directory: e2e/docker

  smoke-caps:
    name: Smoke Test Capabilities
    runs-on: ubuntu-22.04
    needs: goreleaser
    steps:
      - name: Tune GitHub-hosted runner network
        uses: smorimoto/tune-github-hosted-runner-network@v1
      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_ID }}
          private_key: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_PEM_KEY }}
      - name: Override GH Token Env Var
        run: echo "GH_API_TOKEN=${{ steps.generate_token.outputs.token }}" >> $GITHUB_ENV
      - name: Check out code
        uses: actions/checkout@v4
      - name: Download binary tarball
        uses: actions/download-artifact@v4
        with:
          name: binary
      - uses: open-policy-agent/setup-opa@v2 # version doesn't matter, latest is fine
        with:
          version: "1.0.0"
      - name: build bundle with OPA
        run: |
          chmod +x ./eopa
          ./eopa capabilities --current > eopa-capabilities.json
          opa build --capabilities eopa-capabilities.json test/cli/smoke/

  smoke-cli:
    name: Smoke Test CLI
    runs-on: ubuntu-22.04
    needs: build
    steps:
      - name: Tune GitHub-hosted runner network
        uses: smorimoto/tune-github-hosted-runner-network@v1
      - name: Free disk space
        run: |
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo apt clean
          docker rmi $(docker image ls -aq)
          df -h
      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_ID }}
          private_key: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_PEM_KEY }}
      - name: Override GH Token Env Var
        run: echo "GH_API_TOKEN=${{ steps.generate_token.outputs.token }}" >> $GITHUB_ENV
      - name: Check out code
        uses: actions/checkout@v4
      - name: Download image tarball
        uses: actions/download-artifact@v4
        with:
          name: image
      - name: Enterprise OPA image
        id: enterprise-opa
        run: echo "image=$(docker load --quiet --input local.tar | awk '{print $3}')" >> $GITHUB_OUTPUT
      - run: make test
        working-directory: e2e/cli
        env:
          EOPA_LICENSE_TOKEN: ${{ secrets.STYRA_LOAD_LICENSE_TOKEN }}
          IMAGE: ${{ steps.enterprise-opa.outputs.image }}

  performance-related:
    name: Performance
    runs-on: ubuntu-22.04
    steps:
      - name: Tune GitHub-hosted runner network
        uses: smorimoto/tune-github-hosted-runner-network@v1
      - name: Free disk space
        run: |
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo apt clean
          docker rmi $(docker image ls -aq)
          df -h
      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_ID }}
          private_key: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_PEM_KEY }}
      - name: Override GH Token Env Var
        run: echo "GH_API_TOKEN=${{ steps.generate_token.outputs.token }}" >> $GITHUB_ENV
      - name: Setup github api token
        run: git config --global url.https://git:$GH_API_TOKEN@github.com/StyraInc.insteadOf https://github.com/StyraInc
      - uses: actions/checkout@v4
        with:
          path: enterprise-opa
      - id: go_version
        name: Read go version
        run: echo "go_version=$(cat .go-version)" >> $GITHUB_OUTPUT
        working-directory: enterprise-opa

        # benchmark, gobenchdata
      - run: make benchmark
        working-directory: enterprise-opa
      - name: gobenchdata check
        if: ${{ github.ref != 'refs/heads/main' && github.actor != 'dependabot[bot]' }}
        run: go run go.bobheadxi.dev/gobenchdata@v1 action
        env:
          INPUT_GO_TEST_FLAGS: -tags use_opa_fork -timeout=10m
          INPUT_GO_TEST_PKGS: ./pkg/...
          INPUT_SUBDIRECTORY: enterprise-opa
          INPUT_CHECKS: true
          INPUT_CHECKS_CONFIG: enterprise-opa/gobenchdata-checks.yml
          INPUT_PUBLISH_BRANCH: benchmarks
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        timeout-minutes: 10

  cross-build:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: true
      matrix:
        GOOS:
          - windows
          - linux
        GOARCH:
          - amd64
        include:
          - GOOS: darwin
            GOARCH: arm64
    steps:
      - name: Tune GitHub-hosted runner network
        uses: smorimoto/tune-github-hosted-runner-network@v1
      - name: Free disk space
        run: |
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo apt clean
          docker rmi $(docker image ls -aq)
          df -h
      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_ID }}
          private_key: ${{ secrets.PLATFORM_AUTOMATION_GH_APP_PEM_KEY }}
      - name: Override GH Token Env Var
        run: echo "GH_API_TOKEN=${{ steps.generate_token.outputs.token }}" >> $GITHUB_ENV
      - name: setup github api token
        run: git config --global url.https://git:$GH_API_TOKEN@github.com/.insteadOf https://github.com/
      - name: Check out code
        uses: actions/checkout@v4
      - id: go_version
        name: Read go version
        run: echo "go_version=$(cat .go-version)" >> $GITHUB_OUTPUT
      - uses: open-policy-agent/setup-opa@v2
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ steps.go_version.outputs.go_version }}
      - uses: turtlequeue/setup-babashka@v1.7.0
        with:
          babashka-version: ${{ env.BB_VERSION }}
      - run: bb build/cross-build
        env:
          OUTPUTDIR: bins/
          RELEASE: true
          GOOS: ${{ matrix.GOOS }}
          GOARCH: ${{ matrix.GOARCH }}
      - name: Upload cross-build binaries
        uses: actions/upload-artifact@v4
        with:
          name: cross-binaries-${{ matrix.GOOS }}-${{ matrix.GOARCH }}
          path: bins

  cross-test-releases:
    name: Cross Test Releases
    runs-on: ${{ matrix.os }}
    needs:
      - cross-build
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            GOOS: linux
            GOARCH: amd64
          - os: macos-latest
            GOOS: darwin
            GOARCH: arm64
          - os: windows-latest
            GOOS: windows
            GOARCH: amd64
    steps:
      - name: Tune GitHub-hosted runner network
        uses: smorimoto/tune-github-hosted-runner-network@v1
        if: matrix.os != 'windows-latest'
      - run: |
          netsh int ipv4 show dynamicport tcp
          netsh int ipv4 show excludedportrange protocol=tcp
        if: matrix.os == 'windows-latest'
      - name: Free disk space
        run: |
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo apt clean
          docker rmi $(docker image ls -aq)
          df -h
        if: matrix.os == 'ubuntu-22.04'
      - name: Download cross-build binaries
        uses: actions/download-artifact@v4
        with:
          name: cross-binaries-${{ matrix.GOOS }}-${{ matrix.GOARCH }}
          path: bins
      - uses: turtlequeue/setup-babashka@v1.7.0
        with:
          babashka-version: ${{ env.BB_VERSION }}
      - run: bb bins/cross-run
        env:
          EOPA_LICENSE_TOKEN: ${{ secrets.STYRA_LOAD_LICENSE_TOKEN }}
