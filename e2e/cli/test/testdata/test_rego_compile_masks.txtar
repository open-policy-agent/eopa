exec eopa test success
! stderr .
cmp stdout exp/stdout

exec eopa test success_no_md
! stderr .
cmp stdout exp/stdout

-- success/filters.rego --
package filters

# METADATA
# scope: document
# compile:
#   unknowns: ["input.fruits", "input.users"]
#   mask_rule: data.filters.mask
include if input.users.name == input.username

include if input.fruits.name in {"apple", "banana", input.extra_fruit}

mask.fruits.name.replace.value := "<name>"

-- success/filters_test.rego --
package filters

test_generated_where_clause if {
	conditions := rego.compile({
		"query": "data.filters.include",
		"target": "sql+postgresql",
	}) with input.username as "jane"
		with input.extra_fruit as "orange"
	conditions.query == "WHERE (users.name = E'jane' OR fruits.name IN (E'apple', E'banana', E'orange'))"
	conditions.masks == {
		"fruits": {
			"name": {
				"replace": {
					"value": "<name>"
				}
			}
		}
	}
}
-- success_no_md/filters.rego --
package filters

# METADATA
# scope: document
# compile:
#   unknowns: ["input.fruits", "input.users"]
include if input.users.name == input.username

include if input.fruits.name in {"apple", "banana", input.extra_fruit}

mask.fruits.name.replace.value := "<name>"

-- success_no_md/filters_test.rego --
package filters

test_generated_where_clause if {
	conditions := rego.compile({
		"query": "data.filters.include",
		"target": "sql+postgresql",
		"mask_rule": "data.filters.mask",
	}) with input.username as "jane"
		with input.extra_fruit as "orange"
	conditions.query == "WHERE (users.name = E'jane' OR fruits.name IN (E'apple', E'banana', E'orange'))"
	conditions.masks == {"fruits": {"name": {"replace": {"value": "<name>"}}}}
}
-- exp/stdout --
PASS: 1/1
