# This test ensures that `eopa test bootstrap` works with a single Rego file,
# with a single rule. This is our most basic unit test variety.
exec eopa test bootstrap -d example.rego example/allow
! stdout .
cmp stderr exp/stderr
cmp example_test.rego exp/example_test.rego

# Check to make sure we don't overwrite existing tests.
exec eopa test bootstrap -d example.rego example/allow
! stdout .
cmp stderr exp/stderr-no-overwrite
cmp example_test.rego exp/example_test.rego
-- example.rego --
package example

allow {
	input.servers[_].names[_]
	input.clients[_]
}
-- exp/example_test.rego --
package example_test

import rego.v1

# Testcases generated from: example.rego:3
# Success case: All inputs defined.
test_success_example_allow_0 if {
	test_input = {"input": {"clients": "EXAMPLE", "servers": "EXAMPLE"}}
	data.example.allow with input as test_input
}
# Failure case: No inputs defined.
test_fail_example_allow_0_no_input if {
	test_input = {}
	not data.example.allow with input as test_input
}
# Failure case: Inputs defined, but wrong values.
test_fail_example_allow_0_bad_input if {
	test_input = {"input": {"clients": "EXAMPLE", "servers": "EXAMPLE"}}
	not data.example.allow with input as test_input
}

-- exp/stderr --
[INFO] Generating testcases for rule 'data.example.allow'. File destination will be: example_test.rego

-- exp/stderr-no-overwrite --
[INFO] Generating testcases for rule 'data.example.allow'. File destination will be: example_test.rego

[WARNING] File 'example_test.rego' already exists. Skipping to avoid overwriting.

