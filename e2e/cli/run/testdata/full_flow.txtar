# this is the full flow:
# eopa login
# eopa pull
# eopa run --server

[windows] skip 'no way to check this on windows'

### eopa login ###

env PATH=$WORK:$PATH
env HOME=$WORK
chmod 755 $WORK/open
chmod 755 $WORK/xdg-open
exec eopa login --url http://127.0.0.1:9996 --timeout 1s
! stdout .
stderr '\[INFO\] Successfully logged in'

# comparing against a file yields a diff because of a trailing newline
exec echo -n opensesame
cmp stdout .styra-session

# generates config file
cmp .styra.yaml exp/.styra.yaml


### eopa pull ###

# expect failure (the "!") because it's killed at the end of the process
! exec syncmock --port 9996 --cookie-file .styra-session &
[darwin] exec sleep 1

exec eopa pull
! stdout .
stderr '\[INFO\] Retrieving 2 libraries: lib01, lib02'
exec diff -r exp-tgt .styra/include


### eopa run --server ###

# we expect a nonzero exit code on windows
[windows] ! exec eopa run --log-level error --addr 127.0.0.1:61598 --server &eopa&
[!windows]  exec eopa run --log-level error --addr 127.0.0.1:61598 --server &eopa&
! stdout .
! stderr .

# block until the server reports health OK
httpwait 'http://localhost:61598/health' '{}'

# query out data we expect to be present
exec curl -Ss --request GET --url http://localhost:61598/v1/data/libraries/lib02/envoy/allow
cmp stdout exp/stdout_allow
! stderr .

stop eopa
! stdout .
! stderr .

-- open --
#!/bin/sh
export COOKIE=opensesame
loginmock "$*" &

-- xdg-open --
#!/bin/sh
export COOKIE=opensesame
loginmock "$*" &

-- exp/.styra.yaml --
# generated by `eopa login`
data:
- .styra/include
url: http://127.0.0.1:9996
-- exp-tgt/.gitignore --
*
-- exp-tgt/libraries/lib02/envoy/policy.rego --
package libraries.lib02.envoy
import future.keywords
allow if true
-- exp-tgt/libraries/lib02/token/data.json --
{"bearer_token":"testtoken"}
-- exp-tgt/libraries/lib02/thing/data.json --
{"data":{"one":{"foo":1},"two":{"foo":2}}}
-- exp/stdout_allow --
{"result":true}
