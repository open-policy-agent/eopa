# This test ensures that the `eopa run` command correctly accepts extra data to
# insert into the `data.` hierarchy from the `.styra.yaml` config file.
#
# NOTE: port 61662 was chosen at random, so that if we run in parallel with
# other tests, we won't fail to bind to the interface.

# we expect a nonzero exit code on windows
[windows] ! exec eopa run --log-level error --addr 127.0.0.1:61662 --server &eopa&
[!windows]  exec eopa run --log-level error --addr 127.0.0.1:61662 --server &eopa&
! stdout .
! stderr .

# block until the server reports health OK
httpwait 'http://localhost:61662/health' '{}'

# query out data we expect to be present
exec curl -Ss --request GET --url http://localhost:61662/v1/data/foo/bar
cmp stdout exp/stdout_bar
! stderr .
exec curl -Ss --request GET --url http://localhost:61662/v1/data/coolstuff/foobar
cmp stdout exp/stdout_foobar
! stderr .

stop eopa
! stdout .
! stderr .

-- dummy1.rego --
package foo
bar := "abc"
-- cooldir/dummy2.rego --
package coolstuff
foobar := "quux"
-- .styra.yaml --
data:
  ./dummy1.rego
  ./cooldir
-- exp/stdout_bar --
{"result":"abc"}
-- exp/stdout_foobar --
{"result":"quux"}
