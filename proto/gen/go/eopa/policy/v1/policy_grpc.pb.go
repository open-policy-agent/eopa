// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: eopa/policy/v1/policy.proto

package policyv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PolicyServiceClient is the client API for PolicyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PolicyServiceClient interface {
	// ListPolicies returns the set of stored policies in the policy store.
	//
	// This is equivalent in functionality to OPA's
	// [Policy REST API List method](https://www.openpolicyagent.org/docs/latest/rest-api/#list-policies).
	//
	// Warning: This request will enumerate *all* policies stored by the
	// Enterprise OPA instance. This can have substantial overheads if the
	// policies are large in size.
	ListPolicies(ctx context.Context, in *ListPoliciesRequest, opts ...grpc.CallOption) (*ListPoliciesResponse, error)
	// CreatePolicy inserts a new policy module into the policy store.
	//
	// This is equivalent in functionality to OPA's
	// [Policy REST API Create/Update method](https://www.openpolicyagent.org/docs/latest/rest-api/#create-or-update-a-policy).
	//
	// Warning: Inserting a new policy will trigger a full recompilation
	// of *all* policies in the store, in order to ensure the new policy does
	// not break existing policies. This is a known performance hazard for the
	// OPA REST API, and remains a hazard for gRPC as well. Keeping the unique
	// number of policies down, or using Bundles are the recommended
	// workarounds for most OPA users.
	CreatePolicy(ctx context.Context, in *CreatePolicyRequest, opts ...grpc.CallOption) (*CreatePolicyResponse, error)
	// GetPolicy fetches a policy module's code from the policy store.
	//
	// This is roughly equivalent in functionality to OPA's
	// [Policy REST API Get method](https://www.openpolicyagent.org/docs/latest/rest-api/#get-a-policy).
	//
	// Note: Only the raw policy text is returned in this version of the API.
	GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...grpc.CallOption) (*GetPolicyResponse, error)
	// UpdatePolicy updates a policy module in the policy store.
	//
	// This is equivalent in functionality to OPA's
	// [Policy REST API Create/Update method](https://www.openpolicyagent.org/docs/latest/rest-api/#create-or-update-a-policy).
	//
	// Warning: Modifying an existing policy will trigger a full recompilation
	// of *all* policies in the store, in order to ensure the updated policy does
	// not break existing policies. This is a known performance hazard for the
	// OPA REST API, and remains a hazard for gRPC as well. Keeping the unique
	// number of policies down, or using Bundles are the recommended
	// workarounds for most OPA users.
	UpdatePolicy(ctx context.Context, in *UpdatePolicyRequest, opts ...grpc.CallOption) (*UpdatePolicyResponse, error)
	// DeletePolicy removes a policy module from the policy store.
	//
	// This is equivalent in functionality to OPA's
	// [Policy REST API Delete method](https://www.openpolicyagent.org/docs/latest/rest-api/#delete-a-policy).
	//
	// Warning: Removing a policy will trigger a full recompilation of *all*
	// policies in the store, in order to ensure that removing the policy
	// module does not break existing policies. This is a known performance
	// hazard for the OPA REST API, and remains a hazard for gRPC as well.
	// Keeping the unique number of policies down, or using Bundles are the
	// recommended workarounds for most OPA users.
	DeletePolicy(ctx context.Context, in *DeletePolicyRequest, opts ...grpc.CallOption) (*DeletePolicyResponse, error)
	// StreamingPolicyRW specifies a stream of fixed-structure, batched
	// read/write operations.
	//
	// WritePolicy operations are executed sequentially, aborting the entire
	// gRPC call if any operations fail.
	//
	// The ReadPolicy operations are then executed in parallel, but will report
	// errors inline in their responses, instead of aborting the entire gRPC
	// call.
	StreamingPolicyRW(ctx context.Context, opts ...grpc.CallOption) (PolicyService_StreamingPolicyRWClient, error)
}

type policyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPolicyServiceClient(cc grpc.ClientConnInterface) PolicyServiceClient {
	return &policyServiceClient{cc}
}

func (c *policyServiceClient) ListPolicies(ctx context.Context, in *ListPoliciesRequest, opts ...grpc.CallOption) (*ListPoliciesResponse, error) {
	out := new(ListPoliciesResponse)
	err := c.cc.Invoke(ctx, "/eopa.policy.v1.PolicyService/ListPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) CreatePolicy(ctx context.Context, in *CreatePolicyRequest, opts ...grpc.CallOption) (*CreatePolicyResponse, error) {
	out := new(CreatePolicyResponse)
	err := c.cc.Invoke(ctx, "/eopa.policy.v1.PolicyService/CreatePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...grpc.CallOption) (*GetPolicyResponse, error) {
	out := new(GetPolicyResponse)
	err := c.cc.Invoke(ctx, "/eopa.policy.v1.PolicyService/GetPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) UpdatePolicy(ctx context.Context, in *UpdatePolicyRequest, opts ...grpc.CallOption) (*UpdatePolicyResponse, error) {
	out := new(UpdatePolicyResponse)
	err := c.cc.Invoke(ctx, "/eopa.policy.v1.PolicyService/UpdatePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) DeletePolicy(ctx context.Context, in *DeletePolicyRequest, opts ...grpc.CallOption) (*DeletePolicyResponse, error) {
	out := new(DeletePolicyResponse)
	err := c.cc.Invoke(ctx, "/eopa.policy.v1.PolicyService/DeletePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) StreamingPolicyRW(ctx context.Context, opts ...grpc.CallOption) (PolicyService_StreamingPolicyRWClient, error) {
	stream, err := c.cc.NewStream(ctx, &PolicyService_ServiceDesc.Streams[0], "/eopa.policy.v1.PolicyService/StreamingPolicyRW", opts...)
	if err != nil {
		return nil, err
	}
	x := &policyServiceStreamingPolicyRWClient{stream}
	return x, nil
}

type PolicyService_StreamingPolicyRWClient interface {
	Send(*StreamingPolicyRWRequest) error
	Recv() (*StreamingPolicyRWResponse, error)
	grpc.ClientStream
}

type policyServiceStreamingPolicyRWClient struct {
	grpc.ClientStream
}

func (x *policyServiceStreamingPolicyRWClient) Send(m *StreamingPolicyRWRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *policyServiceStreamingPolicyRWClient) Recv() (*StreamingPolicyRWResponse, error) {
	m := new(StreamingPolicyRWResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PolicyServiceServer is the server API for PolicyService service.
// All implementations must embed UnimplementedPolicyServiceServer
// for forward compatibility
type PolicyServiceServer interface {
	// ListPolicies returns the set of stored policies in the policy store.
	//
	// This is equivalent in functionality to OPA's
	// [Policy REST API List method](https://www.openpolicyagent.org/docs/latest/rest-api/#list-policies).
	//
	// Warning: This request will enumerate *all* policies stored by the
	// Enterprise OPA instance. This can have substantial overheads if the
	// policies are large in size.
	ListPolicies(context.Context, *ListPoliciesRequest) (*ListPoliciesResponse, error)
	// CreatePolicy inserts a new policy module into the policy store.
	//
	// This is equivalent in functionality to OPA's
	// [Policy REST API Create/Update method](https://www.openpolicyagent.org/docs/latest/rest-api/#create-or-update-a-policy).
	//
	// Warning: Inserting a new policy will trigger a full recompilation
	// of *all* policies in the store, in order to ensure the new policy does
	// not break existing policies. This is a known performance hazard for the
	// OPA REST API, and remains a hazard for gRPC as well. Keeping the unique
	// number of policies down, or using Bundles are the recommended
	// workarounds for most OPA users.
	CreatePolicy(context.Context, *CreatePolicyRequest) (*CreatePolicyResponse, error)
	// GetPolicy fetches a policy module's code from the policy store.
	//
	// This is roughly equivalent in functionality to OPA's
	// [Policy REST API Get method](https://www.openpolicyagent.org/docs/latest/rest-api/#get-a-policy).
	//
	// Note: Only the raw policy text is returned in this version of the API.
	GetPolicy(context.Context, *GetPolicyRequest) (*GetPolicyResponse, error)
	// UpdatePolicy updates a policy module in the policy store.
	//
	// This is equivalent in functionality to OPA's
	// [Policy REST API Create/Update method](https://www.openpolicyagent.org/docs/latest/rest-api/#create-or-update-a-policy).
	//
	// Warning: Modifying an existing policy will trigger a full recompilation
	// of *all* policies in the store, in order to ensure the updated policy does
	// not break existing policies. This is a known performance hazard for the
	// OPA REST API, and remains a hazard for gRPC as well. Keeping the unique
	// number of policies down, or using Bundles are the recommended
	// workarounds for most OPA users.
	UpdatePolicy(context.Context, *UpdatePolicyRequest) (*UpdatePolicyResponse, error)
	// DeletePolicy removes a policy module from the policy store.
	//
	// This is equivalent in functionality to OPA's
	// [Policy REST API Delete method](https://www.openpolicyagent.org/docs/latest/rest-api/#delete-a-policy).
	//
	// Warning: Removing a policy will trigger a full recompilation of *all*
	// policies in the store, in order to ensure that removing the policy
	// module does not break existing policies. This is a known performance
	// hazard for the OPA REST API, and remains a hazard for gRPC as well.
	// Keeping the unique number of policies down, or using Bundles are the
	// recommended workarounds for most OPA users.
	DeletePolicy(context.Context, *DeletePolicyRequest) (*DeletePolicyResponse, error)
	// StreamingPolicyRW specifies a stream of fixed-structure, batched
	// read/write operations.
	//
	// WritePolicy operations are executed sequentially, aborting the entire
	// gRPC call if any operations fail.
	//
	// The ReadPolicy operations are then executed in parallel, but will report
	// errors inline in their responses, instead of aborting the entire gRPC
	// call.
	StreamingPolicyRW(PolicyService_StreamingPolicyRWServer) error
	mustEmbedUnimplementedPolicyServiceServer()
}

// UnimplementedPolicyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPolicyServiceServer struct {
}

func (UnimplementedPolicyServiceServer) ListPolicies(context.Context, *ListPoliciesRequest) (*ListPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPolicies not implemented")
}
func (UnimplementedPolicyServiceServer) CreatePolicy(context.Context, *CreatePolicyRequest) (*CreatePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePolicy not implemented")
}
func (UnimplementedPolicyServiceServer) GetPolicy(context.Context, *GetPolicyRequest) (*GetPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicy not implemented")
}
func (UnimplementedPolicyServiceServer) UpdatePolicy(context.Context, *UpdatePolicyRequest) (*UpdatePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePolicy not implemented")
}
func (UnimplementedPolicyServiceServer) DeletePolicy(context.Context, *DeletePolicyRequest) (*DeletePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePolicy not implemented")
}
func (UnimplementedPolicyServiceServer) StreamingPolicyRW(PolicyService_StreamingPolicyRWServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingPolicyRW not implemented")
}
func (UnimplementedPolicyServiceServer) mustEmbedUnimplementedPolicyServiceServer() {}

// UnsafePolicyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PolicyServiceServer will
// result in compilation errors.
type UnsafePolicyServiceServer interface {
	mustEmbedUnimplementedPolicyServiceServer()
}

func RegisterPolicyServiceServer(s grpc.ServiceRegistrar, srv PolicyServiceServer) {
	s.RegisterService(&PolicyService_ServiceDesc, srv)
}

func _PolicyService_ListPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).ListPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eopa.policy.v1.PolicyService/ListPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).ListPolicies(ctx, req.(*ListPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_CreatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).CreatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eopa.policy.v1.PolicyService/CreatePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).CreatePolicy(ctx, req.(*CreatePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_GetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).GetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eopa.policy.v1.PolicyService/GetPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).GetPolicy(ctx, req.(*GetPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_UpdatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).UpdatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eopa.policy.v1.PolicyService/UpdatePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).UpdatePolicy(ctx, req.(*UpdatePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_DeletePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).DeletePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eopa.policy.v1.PolicyService/DeletePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).DeletePolicy(ctx, req.(*DeletePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_StreamingPolicyRW_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PolicyServiceServer).StreamingPolicyRW(&policyServiceStreamingPolicyRWServer{stream})
}

type PolicyService_StreamingPolicyRWServer interface {
	Send(*StreamingPolicyRWResponse) error
	Recv() (*StreamingPolicyRWRequest, error)
	grpc.ServerStream
}

type policyServiceStreamingPolicyRWServer struct {
	grpc.ServerStream
}

func (x *policyServiceStreamingPolicyRWServer) Send(m *StreamingPolicyRWResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *policyServiceStreamingPolicyRWServer) Recv() (*StreamingPolicyRWRequest, error) {
	m := new(StreamingPolicyRWRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PolicyService_ServiceDesc is the grpc.ServiceDesc for PolicyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PolicyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eopa.policy.v1.PolicyService",
	HandlerType: (*PolicyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPolicies",
			Handler:    _PolicyService_ListPolicies_Handler,
		},
		{
			MethodName: "CreatePolicy",
			Handler:    _PolicyService_CreatePolicy_Handler,
		},
		{
			MethodName: "GetPolicy",
			Handler:    _PolicyService_GetPolicy_Handler,
		},
		{
			MethodName: "UpdatePolicy",
			Handler:    _PolicyService_UpdatePolicy_Handler,
		},
		{
			MethodName: "DeletePolicy",
			Handler:    _PolicyService_DeletePolicy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingPolicyRW",
			Handler:       _PolicyService_StreamingPolicyRW_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "eopa/policy/v1/policy.proto",
}
