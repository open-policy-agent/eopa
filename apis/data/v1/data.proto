syntax = "proto3";
package apis.data.v1;

message ReadDataRequest {
  string path = 1;
}

message ReadDataResponse {
  string path = 1;
  string data = 2; // json string, like "{\"foo\":true}"
}

message WriteDataRequest {
  string path = 1;
  string operation = 2;
  string data = 3; // json string, like "{\"foo\":true}"
}

message WriteDataResponse {
  string path = 1;
}

// A transaction, comprised of a wrapped series of multiple gRPC messages.
// If any of the write operations in the transaction fail, the transaction is aborted, and no changes will be committed to the store.
// The writes are treated as a "write barrier", and must all complete before any reads occur.
message RWDataTransactionStreamRequest {
  string id = 1; // string identifier used to ID responses as they come back.
  repeated WriteDataRequest writes = 2; // All writes occur first.
  repeated ReadDataRequest reads = 3; // Reads occur second.
}

message RWDataTransactionStreamResponse {
  string id = 1;
  repeated WriteDataResponse writes = 2;
  repeated ReadDataResponse reads = 3;
}

service LoadService {
  rpc ReadData(ReadDataRequest) returns (ReadDataResponse);
  rpc WriteData(WriteDataRequest) returns (WriteDataResponse);

  rpc RWDataTransactionStream(stream RWDataTransactionStreamRequest) returns (stream RWDataTransactionStreamResponse);
}
