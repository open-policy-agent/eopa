// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: apis/data/v1/data.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LoadServiceClient is the client API for LoadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoadServiceClient interface {
	ReadData(ctx context.Context, in *ReadDataRequest, opts ...grpc.CallOption) (*ReadDataResponse, error)
	WriteData(ctx context.Context, in *WriteDataRequest, opts ...grpc.CallOption) (*WriteDataResponse, error)
	RWDataTransactionStream(ctx context.Context, opts ...grpc.CallOption) (LoadService_RWDataTransactionStreamClient, error)
}

type loadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoadServiceClient(cc grpc.ClientConnInterface) LoadServiceClient {
	return &loadServiceClient{cc}
}

func (c *loadServiceClient) ReadData(ctx context.Context, in *ReadDataRequest, opts ...grpc.CallOption) (*ReadDataResponse, error) {
	out := new(ReadDataResponse)
	err := c.cc.Invoke(ctx, "/apis.data.v1.LoadService/ReadData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadServiceClient) WriteData(ctx context.Context, in *WriteDataRequest, opts ...grpc.CallOption) (*WriteDataResponse, error) {
	out := new(WriteDataResponse)
	err := c.cc.Invoke(ctx, "/apis.data.v1.LoadService/WriteData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadServiceClient) RWDataTransactionStream(ctx context.Context, opts ...grpc.CallOption) (LoadService_RWDataTransactionStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &LoadService_ServiceDesc.Streams[0], "/apis.data.v1.LoadService/RWDataTransactionStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &loadServiceRWDataTransactionStreamClient{stream}
	return x, nil
}

type LoadService_RWDataTransactionStreamClient interface {
	Send(*RWDataTransactionStreamRequest) error
	Recv() (*RWDataTransactionStreamResponse, error)
	grpc.ClientStream
}

type loadServiceRWDataTransactionStreamClient struct {
	grpc.ClientStream
}

func (x *loadServiceRWDataTransactionStreamClient) Send(m *RWDataTransactionStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *loadServiceRWDataTransactionStreamClient) Recv() (*RWDataTransactionStreamResponse, error) {
	m := new(RWDataTransactionStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LoadServiceServer is the server API for LoadService service.
// All implementations must embed UnimplementedLoadServiceServer
// for forward compatibility
type LoadServiceServer interface {
	ReadData(context.Context, *ReadDataRequest) (*ReadDataResponse, error)
	WriteData(context.Context, *WriteDataRequest) (*WriteDataResponse, error)
	RWDataTransactionStream(LoadService_RWDataTransactionStreamServer) error
	mustEmbedUnimplementedLoadServiceServer()
}

// UnimplementedLoadServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLoadServiceServer struct {
}

func (UnimplementedLoadServiceServer) ReadData(context.Context, *ReadDataRequest) (*ReadDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadData not implemented")
}
func (UnimplementedLoadServiceServer) WriteData(context.Context, *WriteDataRequest) (*WriteDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteData not implemented")
}
func (UnimplementedLoadServiceServer) RWDataTransactionStream(LoadService_RWDataTransactionStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method RWDataTransactionStream not implemented")
}
func (UnimplementedLoadServiceServer) mustEmbedUnimplementedLoadServiceServer() {}

// UnsafeLoadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoadServiceServer will
// result in compilation errors.
type UnsafeLoadServiceServer interface {
	mustEmbedUnimplementedLoadServiceServer()
}

func RegisterLoadServiceServer(s grpc.ServiceRegistrar, srv LoadServiceServer) {
	s.RegisterService(&LoadService_ServiceDesc, srv)
}

func _LoadService_ReadData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadServiceServer).ReadData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apis.data.v1.LoadService/ReadData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadServiceServer).ReadData(ctx, req.(*ReadDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadService_WriteData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadServiceServer).WriteData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apis.data.v1.LoadService/WriteData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadServiceServer).WriteData(ctx, req.(*WriteDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadService_RWDataTransactionStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LoadServiceServer).RWDataTransactionStream(&loadServiceRWDataTransactionStreamServer{stream})
}

type LoadService_RWDataTransactionStreamServer interface {
	Send(*RWDataTransactionStreamResponse) error
	Recv() (*RWDataTransactionStreamRequest, error)
	grpc.ServerStream
}

type loadServiceRWDataTransactionStreamServer struct {
	grpc.ServerStream
}

func (x *loadServiceRWDataTransactionStreamServer) Send(m *RWDataTransactionStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *loadServiceRWDataTransactionStreamServer) Recv() (*RWDataTransactionStreamRequest, error) {
	m := new(RWDataTransactionStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LoadService_ServiceDesc is the grpc.ServiceDesc for LoadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apis.data.v1.LoadService",
	HandlerType: (*LoadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadData",
			Handler:    _LoadService_ReadData_Handler,
		},
		{
			MethodName: "WriteData",
			Handler:    _LoadService_WriteData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RWDataTransactionStream",
			Handler:       _LoadService_RWDataTransactionStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "apis/data/v1/data.proto",
}
